{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#npm-publish-gradle-plugin","title":"NPM-PUBLISH GRADLE PLUGIN","text":"<p>DISCLAIMER: If you still depend on the old LEGACY Kotlin/JS compiler, please stick with <code>npm-publish:2.1.x</code> version. LEGACY backend support was dropped since <code>npm-publish:3.0.0</code>.</p> <p>Gradle plugin enabling NPM publishing (essentially <code>maven-publish</code> for NPM packages). Integrates seamlessly with Kotlin/JS/MPP plugin if applied, providing auto configurations.</p> <p>Check the latest release for verified JVM, Kotlin and Gradle tooling versions</p>"},{"location":"#setup","title":"Setup","text":"<p>Here's a bare minimum setup when using together with one of the kotlin plugins. This setup would produce the following tasks:</p> <ul> <li><code>assembleJsPackage</code></li> <li><code>packJsPackage</code></li> <li><code>publishJsPackageToNpmjsRegistry</code></li> </ul> build.gradle.kts<pre><code>plugins {\nid(\"dev.petuska.npm.publish\") version \"&lt;VERSION&gt;\"\nkotlin(\"multiplatform\") version \"&lt;VERSION&gt;&gt;\" // Optional, also supports \"js\"\n}\nkotlin {\njs(IR) {\nbinaries.library()\nbrowser() // or nodejs()\n}\n}\nnpmPublish {\nregistries {\nregister(\"npmjs\") {\nuri.set(\"https://registry.npmjs.org\")\nauthToken.set(\"obfuscated\")\n}\n}\n}\n</code></pre> <p>Full documentation can be found on npm-publish.petuska.dev</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See CONTRIBUTING</p> <p>Thanks to all the people who contributed to npm-publish!</p> <p> </p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":"<p>This is a maintenance release with a few minor bugfixes.</p>"},{"location":"CHANGELOG/#verified-versions","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.9.0</li> <li>Gradle: 8.2.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added","title":"Added","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":""},{"location":"CHANGELOG/#removed","title":"Removed","text":""},{"location":"CHANGELOG/#340","title":"3.4.0","text":"<p>This is a maintenance release with a few minor bugfixes.</p>"},{"location":"CHANGELOG/#verified-versions_1","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.9.0</li> <li>Gradle: 8.2.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Gradle configuration cache support</li> <li>New Local TS consumer setup sample</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>All sandbox modules and samples have been migrated away from deprecated kotlin/js plugin.</li> <li>Upgraded dependency versions</li> <li>Deprecated kotlin/js plugin integration</li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":""},{"location":"CHANGELOG/#331","title":"3.3.1","text":""},{"location":"CHANGELOG/#verified-versions_2","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.8.21</li> <li>Gradle: 8.1.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_2","title":"Added","text":""},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Fixed gradle provider chain for nebula node plugin integration</li> <li>Fixed incorrect NodeExec task command line builds and expanded logging</li> </ul>"},{"location":"CHANGELOG/#removed_2","title":"Removed","text":""},{"location":"CHANGELOG/#330","title":"3.3.0","text":""},{"location":"CHANGELOG/#verified-versions_3","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.8.21</li> <li>Gradle: 8.1.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>New <code>tag</code> option for <code>NpmPublishTask</code></li> <li>Integration with <code>com.netflix.nebula:nebula-node-plugin</code> to allow publishing without having NodeJS installed when   kotlin plugin is not being used</li> </ul>"},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Modified KDoc of properties affected by gradle 8.1.1 new resolution strategy. tl;dr; they now require explicit <code>this</code>   receiver</li> <li>Replaced <code>refreshVersions</code> plugin with gradle catalogs</li> <li>Upgraded internal dependencies</li> <li>Fixed <code>otp</code> option not being properly propagated to npm executable</li> </ul>"},{"location":"CHANGELOG/#removed_3","title":"Removed","text":""},{"location":"CHANGELOG/#321","title":"3.2.1","text":""},{"location":"CHANGELOG/#verified-versions_4","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.8.10</li> <li>Gradle: 7.6</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_4","title":"Added","text":""},{"location":"CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>Pegged plugin compile kotlin version against gradle's <code>embeddedKotlinVersion</code></li> <li>Removed <code>gson</code> dependency and replaced usages with groovy's <code>JsonSlurper</code></li> </ul>"},{"location":"CHANGELOG/#removed_4","title":"Removed","text":""},{"location":"CHANGELOG/#320-2022-12-28","title":"3.2.0 - 2022-12-28","text":""},{"location":"CHANGELOG/#verified-versions_5","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.8.0</li> <li>Gradle: 7.5.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li>New samples project containing examples of various use-cases the plugin is able to cover.</li> <li><code>@DslMarkers</code> to plugin's DSL to prevent incorrect nested property usage.</li> <li>Pull transitive npm dependencies from project dependencies via <code>publicPackageJson</code></li> <li>New accessors for assemble and pack tasks inside package DSL</li> <li>KGP 1.8.0 support.</li> </ul>"},{"location":"CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li>Fix #73: <code>nodeHome</code> override not working when used with kotlin plugin</li> </ul>"},{"location":"CHANGELOG/#removed_5","title":"Removed","text":"<ul> <li>Support for KGP &lt; 1.8.0!!! DO NOT UPGRADE IF YOU'RE ON OLDER KOTLIN VERSION</li> </ul>"},{"location":"CHANGELOG/#310-2022-11-07","title":"3.1.0 - 2022-11-07","text":""},{"location":"CHANGELOG/#verified-versions_6","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.6.21</li> <li>Gradle: 7.5.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_6","title":"Added","text":""},{"location":"CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>Updated dependency versions</li> <li>Configuration cache support</li> </ul>"},{"location":"CHANGELOG/#removed_6","title":"Removed","text":""},{"location":"CHANGELOG/#301-2022-06-27","title":"3.0.1 - 2022-06-27","text":""},{"location":"CHANGELOG/#verified-versions_7","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.7.0</li> <li>Gradle: 7.4.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_7","title":"Added","text":""},{"location":"CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li>Kotlin version bumped to <code>1.7.0</code></li> <li>Downgraded language version to <code>1.4</code> for better gradle support</li> </ul>"},{"location":"CHANGELOG/#removed_7","title":"Removed","text":""},{"location":"CHANGELOG/#300-2022-05-03","title":"3.0.0 - 2022-05-03","text":""},{"location":"CHANGELOG/#verified-versions_8","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.6.21</li> <li>Gradle: 7.4.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_8","title":"Added","text":"<ul> <li>New documentation site</li> <li>Functional and Integration test coverage</li> <li>Gradle caching support for configuration, <code>NpmAssembleTask</code> and <code>NpmPackTask</code> (including remote caches)</li> <li>Detekt analyser and formatter</li> </ul>"},{"location":"CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>Kotlin plugin version bumped to <code>1.6.20</code></li> <li><code>npmPublishing</code> extension renamed to <code>npmPublish</code></li> <li>Default packaging directories changed from <code>build/publications/npm</code> to <code>build/packages</code></li> <li><code>publication</code> and <code>repository</code> DSLs removed. Use regular gradle's <code>register</code> DSL</li> <li>All API reworked to use gradle provider API. Replace all <code>=</code> assignments with proper <code>.set()</code> invocation.</li> <li><code>NpmPackageAssembleTask</code> renamed to <code>NpmAssembleTask</code></li> <li><code>NpmPackage::moduleName</code> renamed to <code>NpmPackage::packageName</code></li> <li><code>NpmPackage::nodeJsDir</code> renamed to <code>nodeHome</code> and moved to <code>NpmPublishExtension</code>. It is now shared across all   publications.</li> <li><code>NpmPackage::destinationDir</code> moved to <code>NpmAssembleTask</code>.</li> <li><code>NpmRegistry::dry</code> propagated to <code>NpmPackTask</code> and <code>NpmPublishTask</code> with <code>--dry</code> cli option added. Both still default   to <code>NpmPublishExtension::dry</code></li> <li>All plugin tasks made a lot more abstract and reusable. Especially <code>NodeExecTask</code> and <code>NpmExecTask</code> allowing for   custom npm script execution on your packages or any other generic tooling.</li> </ul>"},{"location":"CHANGELOG/#removed_8","title":"Removed","text":"<ul> <li>Support for <code>LEGACY</code> compiler. Stick with <code>2.1.x</code> if you still depend on it.</li> <li>All eager configuration</li> <li>Custom kotlin delegates for gradle lazy api</li> <li><code>dev.petuska:kon</code> dependency</li> <li><code>dev.petuska:gradle-lazy-delegates</code> dependency</li> <li><code>dev.petuska:klip</code> dependency</li> <li>All kotest dependencies</li> <li>Spotless plugin</li> </ul>"},{"location":"CHANGELOG/#212-2022-01-24","title":"2.1.2 - 2022-01-24","text":""},{"location":"CHANGELOG/#verified-versions_9","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.6.10</li> <li>Gradle: 7.3.3</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_9","title":"Added","text":""},{"location":"CHANGELOG/#changed_9","title":"Changed","text":"<ul> <li>Kotlin plugin version bumped to <code>1.6.10</code></li> <li>Simplified <code>JsonObject</code> DSL builders by rebasing it onto <code>dev.petuska:kon</code></li> <li>Implemented proper nested <code>package.json</code> template merging</li> <li>Rolled back to good old <code>ktlint</code> formatting</li> </ul>"},{"location":"CHANGELOG/#removed_9","title":"Removed","text":""},{"location":"CHANGELOG/#211-2021-09-02","title":"2.1.1 - 2021-09-02","text":""},{"location":"CHANGELOG/#verified-versions_10","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.30</li> <li>Gradle: 7.2.0</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_10","title":"Added","text":"<ul> <li>Sample GH action introduced to showcase CI publishing</li> </ul>"},{"location":"CHANGELOG/#changed_10","title":"Changed","text":"<ul> <li>Fixed #24: <code>types</code> configuration property was ignored</li> <li>Reworked ts-consumer to showcase module inter-dependencies</li> </ul>"},{"location":"CHANGELOG/#removed_10","title":"Removed","text":""},{"location":"CHANGELOG/#210-2021-08-22","title":"2.1.0 - 2021-08-22","text":""},{"location":"CHANGELOG/#verified-versions_11","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.21</li> <li>Gradle: 7.2.0</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_11","title":"Added","text":"<ul> <li>Added support for setting configuration properties via environment variables too</li> </ul>"},{"location":"CHANGELOG/#changed_11","title":"Changed","text":"<ul> <li>Fixed #24: <code>types</code> configuration property was ignored</li> <li>Kotlin version bumped to <code>1.5.21</code></li> </ul>"},{"location":"CHANGELOG/#removed_11","title":"Removed","text":""},{"location":"CHANGELOG/#204-2021-07-21","title":"2.0.4 - 2021-07-21","text":""},{"location":"CHANGELOG/#verified-versions_12","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.10</li> <li>Gradle: 7.1.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_12","title":"Added","text":"<ul> <li>New sandbox module to check that plugin can work with both, nodejs() and browser() flavours at the same time</li> <li>New <code>ts-consumer</code> module in the sandbox to showcase how to include packed K/JS modules into plain TS module</li> <li>Dynamic version ranges for increased compatibility</li> </ul>"},{"location":"CHANGELOG/#changed_12","title":"Changed","text":"<ul> <li>Updated versions</li> <li>Fixed a bug that always expected version to be a string</li> </ul>"},{"location":"CHANGELOG/#removed_12","title":"Removed","text":"<ul> <li>Removed some duplicated code in sandbox</li> </ul>"},{"location":"CHANGELOG/#203-2021-06-18","title":"2.0.3 - 2021-06-18","text":""},{"location":"CHANGELOG/#verified-versions_13","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.10</li> <li>Gradle: 7.0.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_13","title":"Added","text":""},{"location":"CHANGELOG/#changed_13","title":"Changed","text":"<ul> <li>#19 <code>licence</code> field typo fix to get it working with npm (big thanks to @gaebel)</li> </ul>"},{"location":"CHANGELOG/#removed_13","title":"Removed","text":""},{"location":"CHANGELOG/#202-2021-06-09","title":"2.0.2 - 2021-06-09","text":""},{"location":"CHANGELOG/#verified-versions_14","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.10</li> <li>Gradle: 7.0.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_14","title":"Added","text":""},{"location":"CHANGELOG/#changed_14","title":"Changed","text":"<ul> <li>#16 Fix NpmPublishTask workingDir scope</li> </ul>"},{"location":"CHANGELOG/#removed_14","title":"Removed","text":""},{"location":"CHANGELOG/#201-2021-05-28","title":"2.0.1 - 2021-05-28","text":""},{"location":"CHANGELOG/#verified-versions_15","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.10</li> <li>Gradle: 7.0.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_15","title":"Added","text":""},{"location":"CHANGELOG/#changed_15","title":"Changed","text":"<ul> <li>Eased <code>duplicationRules</code> for assemble task. Will now warn instead of fail.</li> </ul>"},{"location":"CHANGELOG/#removed_15","title":"Removed","text":""},{"location":"CHANGELOG/#200-2021-05-25","title":"2.0.0 - 2021-05-25","text":""},{"location":"CHANGELOG/#verified-versions_16","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.10</li> <li>Gradle: 7.0.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_16","title":"Added","text":""},{"location":"CHANGELOG/#changed_16","title":"Changed","text":"<ul> <li>Plugin id changed from <code>lt.petuska.npm.publish</code> to <code>dev.petuska.npm.publish</code></li> <li>Root package changed to <code>dev.petuska.npm.publish</code>.   To migrate, just replace <code>lt.</code> part to <code>dev.</code> in all imports you might have (tasks, DSL, etc...)</li> </ul>"},{"location":"CHANGELOG/#removed_16","title":"Removed","text":""},{"location":"LICENSE/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright 2020 dev.petuska</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>While the automatic default configuration should cover most of the use-cases, it might still come short for some projects. </p> <p>Worry not, npm-publish is highly customisable, allowing you to tweak anything you wish.</p> <p>The following pages will cover all the configuration options available, their defaults and intended use.</p>"},{"location":"user-guide/quick-start/","title":"Quick Start","text":"<p>Here's a bare minimum setup when using the plugin standalone or together with one of the kotlin plugins.</p> Kotlin/MPPKotlin/JSStandalone build.gradle.kts<pre><code>plugins {\nid(\"dev.petuska.npm.publish\") version \"&lt;VERSION&gt;\"\nkotlin(\"multiplatform\") version \"&lt;VERSION&gt;&gt;\"\n}\nkotlin {\njs(IR) {\nbinaries.library()\nbrowser() // (1)\n}\n}\nnpmPublish {\nregistries {\nregister(\"npmjs\") {\nuri.set(uri(\"https://registry.npmjs.org\")) // (2)\nauthToken.set(\"obfuscated\")\n}\n}\n}\n</code></pre> <ol> <li><code>nodejs()</code> works too</li> <li><code>uri</code> can also be set from String as <code>uri.set(\"https://registry.npmjs.org\")</code>     in which case the plugin will construct an URI instance from the string for you</li> </ol> build.gradle.kts<pre><code>plugins {\nid(\"dev.petuska.npm.publish\") version \"&lt;VERSION&gt;\"\nkotlin(\"js\") version \"&lt;VERSION&gt;&gt;\"\n}\nkotlin {\njs(IR) {\nbinaries.library()\nbrowser() // (1)\n}\n}\nnpmPublish {\nregistries {\nregister(\"npmjs\") {\nuri.set(uri(\"https://registry.npmjs.org\")) // (2)\nauthToken.set(\"obfuscated\")\n}\n}\n}\n</code></pre> <ol> <li><code>nodejs()</code> works too</li> <li><code>uri</code> can also be set from String as <code>uri.set(\"https://registry.npmjs.org\")</code>     in which case the plugin will construct an URI instance from the string for you</li> </ol> build.gradle.kts<pre><code>plugins {\nid(\"dev.petuska.npm.publish\") version \"&lt;VERSION&gt;\"\n}\nnpmPublish {\npackages {\nregister(\"js\") {\n...\n}\n}\nregistries {\nregister(\"npmjs\") {\nuri.set(uri(\"https://registry.npmjs.org\")) // (1)\nauthToken.set(\"obfuscated\")\n}\n}\n}\n</code></pre> <ol> <li><code>uri</code> can also be set from String as <code>uri.set(\"https://registry.npmjs.org\")</code>     in which case the plugin will construct an URI instance from the string for you</li> </ol> <p>This setup would produce the following tasks:</p> <ul> <li><code>assembleJsNpmPackage: NpmAssembleTask</code></li> <li><code>packJsNpmPackage: NpmPackTask</code></li> <li><code>publishJsPackageToNpmjsRegistry: NpmPublishTask</code></li> </ul> <p>Info</p> <p>One publish task is created for every <code>package</code> + <code>registry</code> combination.  The task is named as <code>publish&lt;PackageName&gt;PackageTo&lt;RegistryName&gt;Registry</code></p>"},{"location":"user-guide/configuration/","title":"Configuration","text":""},{"location":"user-guide/configuration/#summary","title":"Summary","text":"<p>Most of the configurations are hooked up to flow downstream to the eventual task configurations in the priority order, where each layer looks up the chain for default value if an explicit value is not configured for it. This allows setting default values for a lot of downstream configurations once and overriding them only where needed.</p>"},{"location":"user-guide/configuration/#configuration-layers","title":"Configuration Layers","text":"<p>The configuration values are resolved in the following descending priority order:</p> <ol> <li> <p>Properties</p> <ol> <li>CLI options (<code>--arg=value</code>)</li> <li>System properties (<code>-Dprop=value</code>)</li> <li>Gradle properties (<code>-Pprop=value</code>, <code>ORG_GRADLE_PROJECT_prop=value</code> env    variable, <code>-Dorg.gradle.project.prop=value</code>    system property or <code>prop=value</code> stored in <code>gradle.properties</code> file)</li> <li>Env variables (<code>PROP=value</code>)</li> </ol> </li> <li> <p>Extension</p> </li> <li>Package / Registry</li> <li>Tasks</li> </ol> <p>Important</p> <p>The layering only works for properties that have no explicit values set via the DSL as doing so overrides any layering or default behaviour.</p>"},{"location":"user-guide/configuration/extension/","title":"Extension","text":""},{"location":"user-guide/configuration/extension/#summary","title":"Summary","text":"<p>The plugin registers a top level <code>npmPublish: NpmPublishExtension</code> extension for the project as a main entrypoint for most of the plugin configuration options.</p> <p>The extension can be accessed and configured from a <code>build.gradle.kts</code> file by invoking its name.</p> build.gradle.kts<pre><code>npmPublish {\n...\n}\n</code></pre>"},{"location":"user-guide/configuration/extension/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>nodeHome</code> Directory <code>NODE_HOME</code> env variable <code>kotlinNodeJsSetup</code> task output <code>readme</code> RegularFile <code>npmIgnore</code> RegularFile <code>$projectDir/.npmignore</code> <code>organization</code> String <code>version</code> String <code>Project::version</code> <code>access</code> NpmAccess <code>NpmAccess.PUBLIC</code> <code>dry</code> Boolean <code>false</code> <code>packages</code> NpmPackages <code>registries</code> NpmRegistries Property CLI System/Gradle Environment <code>nodeHome</code> <code>npm.publish.nodeHome</code> <code>NPM_PUBLISH_NODEHOME</code> <code>readme</code> <code>npm.publish.readme</code> <code>NPM_PUBLISH_README</code> <code>npmIgnore</code> <code>npm.publish.npmIgnore</code> <code>NPM_PUBLISH_NPMIGNORE</code> <code>organization</code> <code>npm.publish.organization</code> <code>NPM_PUBLISH_ORGANIZATION</code> <code>version</code> <code>npm.publish.version</code> <code>NPM_PUBLISH_VERSION</code> <code>access</code> <code>npm.publish.access</code> <code>NPM_PUBLISH_ACCESS</code> <code>dry</code> <code>npm.publish.dry</code> <code>NPM_PUBLISH_DRY</code> <code>packages</code> <code>registries</code> build.gradle.kts<pre><code>npmPublish {\nnodeHome.set(File(\"/path/to/node\"))\nreadme.set(rootDir.resolve(\"README.md\"))\nnpmIgnore.set(projectDir.resolve(\".npmIgnore\"))\norganization.set(\"${project.group}\")\nversion.set(\"${project.version}\")\naccess.set(RESTRICTED)\ndry.set(true)\npackages {\n...\n}\nregistries {\n...\n}\n}\n</code></pre>"},{"location":"user-guide/configuration/extension/#nodehome","title":"<code>nodeHome</code>","text":"<p>Default NodeJS directory to be used when executing npm commands.</p> <p>Info</p> <p>This is set automatically when certain other plugins are applied - <code>org.jetbrains.kotlin.multiplatform</code> &amp; <code>org.jetbrains.kotlin.js</code>: <code>kotlinNodeJsSetup</code> task output - <code>com.netflix.nebula:nebula-node-plugin</code>: <code>nodeSetup</code> task output</p>"},{"location":"user-guide/configuration/extension/#readme","title":"<code>readme</code>","text":"<p>A location of the default <code>README.md</code> file. If set, it will be used as a default for all packages that do not have one set explicitly. The file name is ignored and renamed to <code>README.md</code> when assembling.</p>"},{"location":"user-guide/configuration/extension/#npmignore","title":"<code>npmIgnore</code>","text":"<p>A location of the default <code>.npmignore</code> file. If set, it will be used as a default for all packages that do not have one set explicitly.</p>"},{"location":"user-guide/configuration/extension/#organization","title":"<code>organization</code>","text":"<p>Default package scope. If set, it will be used as a default for all packages that do not have one set explicitly.</p>"},{"location":"user-guide/configuration/extension/#version","title":"<code>version</code>","text":"<p>Default package version. If set, it will be used as a default for all packages that do not have one set explicitly.</p>"},{"location":"user-guide/configuration/extension/#access","title":"<code>access</code>","text":"<p>Default package access when publishing to npm registries. More info</p>"},{"location":"user-guide/configuration/extension/#dry","title":"<code>dry</code>","text":"<p>Specifies if a dry-run should be added to the npm command arguments by default. Dry run does all the normal run does, but without making any modifications to local or remote files.</p>"},{"location":"user-guide/configuration/extension/#packages","title":"<code>packages</code>","text":"<p>A container for npm package configurations.  See Package for detailed description of the container entities.</p>"},{"location":"user-guide/configuration/extension/#registries","title":"<code>registries</code>","text":"<p>A container for npm registry configurations.  See Registry for detailed description of the container entities.</p>"},{"location":"user-guide/configuration/package/","title":"Package","text":""},{"location":"user-guide/configuration/package/#summary","title":"Summary","text":"<p>The packages configure the npm bundles. For each configured <code>NpmPackage</code> <code>assemble&lt;PackageName&gt;Package</code> NpmAssembleTask and <code>pack&lt;PackageName&gt;Package</code> NpmPackTask tasks will be generated and added as dependencies to the <code>assemble</code> and <code>pack</code> lifecycle tasks respectively.</p> <p>The packages can be accessed and configured from a <code>build.gradle.kts</code> file via <code>npmPublish::packages</code> invocation.</p> build.gradle.kts<pre><code>npmPublish {\npackages {\n...\n}\n}\n</code></pre>"},{"location":"user-guide/configuration/package/#packagejson-resolution","title":"<code>package.json</code> Resolution","text":"<p>During the package assembly, a <code>package.json</code> file is generated from various configuration options.</p> <p>For convenience, some key properties of the file are exposed as a top-level package configurations (such as <code>main</code>). These configurations can be overridden via <code>packageJson</code> DSL, which exposes the entire <code>package.json</code> file structure and allows unrestricted customisation.</p> <p>Alternatively, you could opt in to use <code>packageJsonFile</code> instead, which short-circuits the entire resolution process and instead uses provided static package.json file, fully disregarding all the other <code>package.json</code> configurations.</p> <p>Finally, <code>packageJsonTemplateFile</code> option provides a way to get the best of both worlds. When set, the provided template file will be used as a baseline on which top-level and <code>packageJson</code> DSL configurations are applied. This way you could setup a static part of your <code>package.json</code> file from within the template and only manage dynamic parts such as version and dependencies from the package DSL.</p>"},{"location":"user-guide/configuration/package/#dependency-resolution","title":"Dependency Resolution","text":"<p>NPM dependencies detected/declared for each publication are resolved into relevant <code>package.json</code> dependency block by this priority order (descending priority):</p> <ol> <li>Optional</li> <li>Peer</li> <li>Dev</li> <li>Normal</li> </ol> <p>This ensures that any given dependency does not appear in multiple dependency scopes.</p>"},{"location":"user-guide/configuration/package/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>scope</code> String <code>NpmPublishExtension::organization</code> <code>packageName</code> String <code>Project::name</code> <code>version</code> String <code>NpmPublishExtension::version</code> <code>main</code> String Target's <code>Kotlin2JsCompile::outputFile</code> <code>types</code> String Target's <code>Kotlin2JsCompile::outputFile::nameWithoutExtension</code> + <code>.d.ts</code> <code>readme</code> RegularFile <code>NpmPublishExtension::readme</code> <code>npmIgnore</code> RegularFile <code>NpmPublishExtension::npmIgnore</code> <code>files</code> ConfigurableFileCollection Target's <code>Kotlin2JsCompile</code> and <code>processResources</code> task outputs <code>packageJson</code> PackageJson <code>packageJsonFile</code> RegularFile <code>packageJsonTemplateFile</code> RegularFile <code>dependencies</code> NpmDependencies Target compilations' dependencies Property CLI System/Gradle Environment <code>scope</code> <code>npm.publish.package.&lt;name&gt;.scope</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_SCOPE</code> <code>packageName</code> <code>npm.publish.package.&lt;name&gt;.packageName</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_PACKAGENAME</code> <code>version</code> <code>npm.publish.package.&lt;name&gt;.version</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_VERSION</code> <code>main</code> <code>npm.publish.package.&lt;name&gt;.main</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_MAIN</code> <code>types</code> <code>npm.publish.package.&lt;name&gt;.types</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_TYPES</code> <code>readme</code> <code>npm.publish.package.&lt;name&gt;.readme</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_README</code> <code>npmIgnore</code> <code>npm.publish.package.&lt;name&gt;.npmIgnore</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_NPMIGNORE</code> <code>files</code> <code>packageJson</code> <code>packageJsonFile</code> <code>npm.publish.package.&lt;name&gt;.packageJsonFile</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_PACKAGEJSONFILE</code> <code>packageJsonTemplateFile</code> <code>npm.publish.package.&lt;name&gt;.packageJsonTemplateFile</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_PACKAGEJSONTEMPLATEFILE</code> <code>dependencies</code> build.gradle.kts<pre><code>npmPublish {\npackages {\nregister(\"js\") {\nscope.set(group as String)\npackageName.set(\"coolio\")\nversion.set(\"4.20.69\")\nmain.set(\"main.js\")\ntypes.set(\"main.d.ts\")\nreadme.set(rootDir.resolve(\"README.md\"))\nnpmIgnore.set(rootDir.resolve(\".npmignore\"))\nfiles {\nfrom(\"some/path\")\n}\npackageJson {\n...\n}\npackageJsonFile.set(projectDir.resolve(\"package.json\"))\npackageJsonTemplateFile.set(projectDir.resolve(\"package.template.json\"))\nthis.dependencies { // (1)\noptional(\"axios\", \"*\")\npeer(\"axios\", \"*\")\ndev(\"axios\", \"*\")\nnormal(\"axios\", \"*\")\n}\n}\n}\n}\n</code></pre> <ol> <li><code>this</code> is required in gradle &gt; 8.1.1</li> </ol>"},{"location":"user-guide/configuration/package/#scope","title":"<code>scope</code>","text":"<p>Optional npm scope. If set, the package name will be constructed as <code>@{scope}/{packageName}</code></p>"},{"location":"user-guide/configuration/package/#packagename","title":"<code>packageName</code>","text":"<p>NPM package name. Can be overridden via <code>packageJson</code> DSL's <code>name</code> property</p>"},{"location":"user-guide/configuration/package/#version","title":"<code>version</code>","text":"<p>NPM package name. Can be overridden via <code>packageJson</code> DSL's <code>version</code> property</p>"},{"location":"user-guide/configuration/package/#main","title":"<code>main</code>","text":"<p>Main <code>.js</code> entry file relative to the <code>package.json</code> file. Can be overridden via <code>packageJson</code> DSL's <code>main</code> property</p>"},{"location":"user-guide/configuration/package/#types","title":"<code>types</code>","text":"<p>Main <code>.d.ts</code> entry file relative to the <code>package.json</code> file. Can be overridden via <code>packageJson</code> DSL's <code>types</code> property</p>"},{"location":"user-guide/configuration/package/#readme","title":"<code>readme</code>","text":"<p>A location of the <code>README.md</code> file. If set, the file will be moved to package assembly root and renamed to README.md (regardless of the actual name).</p>"},{"location":"user-guide/configuration/package/#npmignore","title":"<code>npmIgnore</code>","text":"<p>A location of the <code>.npmignore</code> file.</p>"},{"location":"user-guide/configuration/package/#files","title":"<code>files</code>","text":"<p>Specification of files that should be assembled for this package. It uses standard Gradle's CopySpec to declare copying hierarchies and filtering rules. More info</p>"},{"location":"user-guide/configuration/package/#packagejson","title":"<code>packageJson</code>","text":"<p><code>package.json</code> customisation container. All values set here will override top-level configurations like <code>types</code></p> <p>The container is modelled on top of Map-like structure with additional standard <code>package.json</code> fields added as explicit properties. This means that not only you can configure standard <code>package.json</code> file in a type-safe manner, but also add arbitrary fields of your own.</p> build.gradle.kts<pre><code>npmPublish {\npackages {\nnamed(\"js\") {\npackageJson {\n\"customNestedObject\" by {\n\"nestedField\" by \"ok\"\n}\n\"customArray\" by arrayOf(1,2,3)\n\"customObjectArray\" by arrayOf(json {\n\"nestedField\" by 1\n})\n\"customField\" by true\n}\n}\n}\n}\n</code></pre>"},{"location":"user-guide/configuration/package/#packagejsonfile","title":"<code>packageJsonFile</code>","text":"<p>Path to a static <code>package.json</code> file. If set, fully disregards all related <code>package.json</code> configurations and is used as-is.</p>"},{"location":"user-guide/configuration/package/#packagejsontemplatefile","title":"<code>packageJsonTemplateFile</code>","text":"<p>Path to a baseline <code>package.json</code> template file. Similar to <code>packageJsonFile</code> except allows the options to be overridden by the <code>packageJson</code> and top-level options.</p>"},{"location":"user-guide/configuration/package/#dependencies","title":"<code>dependencies</code>","text":"<p>Note</p> <p>Since gradle <code>8.1.1</code> it is required to use explicit <code>this</code> receiver to access <code>dependencies</code> block <pre><code>this.dependencies {\n}\n</code></pre></p> <p>Package's npm dependency container. It can be configured by invoking the property and using provided , <code>optional</code>, <code>peer</code>, <code>dev</code> and <code>normal</code> DSLs.</p> build.gradle.kts<pre><code>npmPublish {\npackages {\nnamed(\"js\") {\ndependencies {\noptional(\"axios\", \"*\")\npeer(\"axios\", \"*\")\ndev(\"axios\", \"*\")\nnormal(\"axios\", \"*\")\n}\n}\n}\n}\n</code></pre> <p>Info</p> <p>Dependencies are deduplicated during resolution to avoid multiple occurrences of a dependency across different dependency scopes</p>"},{"location":"user-guide/configuration/properties/","title":"Properties","text":""},{"location":"user-guide/configuration/properties/#summary","title":"Summary","text":"<p>Most of the configuration options are set to be configurable via various CLI inputs and follow a configuration layers order. Such CLI properties can be passed in four different ways - Gradle CLI Options, System Properties, Gradle Extra Properties, Gradle Properties and Environment Variables.</p>"},{"location":"user-guide/configuration/properties/#gradle-cli-options","title":"Gradle CLI Options","text":"<p>Gradle CLI options are only available for the tasks and can be passed in by specifying their keys prefixed with double hyphens (<code>--</code>) right after the task name. Boolean properties can omit the value when representing <code>true</code> states.</p> /bin/bash<pre><code>./gradlew publishJsPackageToNpmjsRegistry --dry --authToken=\"obfuscated\"\n</code></pre>"},{"location":"user-guide/configuration/properties/#system-properties","title":"System Properties","text":"<p>System properties are only available for the configurations and can be passed in by specifying their keys prefixed with <code>-D</code> anywhere on the command line. Boolean properties can omit the value when representing <code>true</code> states.</p> /bin/bash<pre><code>./gradlew publishJsPackageToNpmjsRegistry -Dnpm.publish.registry.npmjs.dry -Dnpm.publish.registry.npmjs.authToken=\"obfuscated\"\n</code></pre>"},{"location":"user-guide/configuration/properties/#gradle-extra-properties","title":"Gradle Extra Properties","text":"<p>Gradle extra properties are only available for the configurations and can be passed in via <code>extra</code> project extension. This can be useful for multi-module builds that needs to configure other modules from submodules. Boolean properties can omit the value when representing <code>true</code> states.</p> build.gradle.kts<pre><code>extra.properties[\"npm.publish.registry.npmjs.dry\"] = null\nextra.properties[\"npm.publish.registry.npmjs.authToken\"] = \"obfuscated\"\n</code></pre>"},{"location":"user-guide/configuration/properties/#gradle-properties","title":"Gradle Properties","text":"<p>Gradle properties are only available for the configurations and can be passed in by specifying their keys prefixed with <code>-P</code> anywhere on the command line or via the <code>gradle.properties</code> file. Boolean properties can omit the value when representing <code>true</code> states.</p> CLIgradle.properties /bin/bash<pre><code>./gradlew publishJsPackageToNpmjsRegistry -Pnpm.publish.registry.npmjs.dry -Pnpm.publish.registry.npmjs.authToken=\"obfuscated\"\n</code></pre> gradle.properties<pre><code>npm.publish.registry.npmjs.dry=\nnpm.publish.registry.npmjs.authToken=\"obfuscated\"\n</code></pre>"},{"location":"user-guide/configuration/properties/#environment-variables","title":"Environment Variables","text":"<p>Environment variables are only available for the configurations and can be passed in by specifying their uppercase keys in the current process's environment. Boolean properties can omit the value when representing <code>true</code> states.</p> /bin/bash<pre><code>export NPM_PUBLISH_REGISTRY_NPMJS_DRY=\nexport NPM_PUBLISH_REGISTRY_NPMJS_AUTHTOKEN=\"obfuscated\"\n./gradlew publishJsPackageToNpmjsRegistry\n</code></pre>"},{"location":"user-guide/configuration/registry/","title":"Registry","text":""},{"location":"user-guide/configuration/registry/#summary","title":"Summary","text":"<p>The registries configure publication targets and their authentication. For each configured <code>NpmRegistry</code> and <code>NpmPackage</code> combination, a unique <code>publish&lt;PackageName&gt;PackageTo&lt;RegistryName&gt;Registry</code> NpmPublishTask will be generated and added as a dependency to the <code>publish</code> lifecycle task.</p> <p>The registries can be accessed and configured from a <code>build.gradle.kts</code> file via <code>npmPublish::registries</code> invocation.</p> build.gradle.kts<pre><code>npmPublish {\nregistries {\n...\n}\n}\n</code></pre>"},{"location":"user-guide/configuration/registry/#shortcuts","title":"Shortcuts","text":"<p>Some shortcuts are also available for common npm registries. These shortcuts simply name the registry and sets the appropriate uri for you. The names of the registries match the DSL name. Finally, the shortcuts are repeatable and will detect and configure existing registries on subsequent invocations.</p> build.gradle.kts<pre><code>npmPublish {\nregistries {\nnpmjs {\nauthToken.set(\"obfuscated\")\n}\ngithub {\nauthToken.set(\"obfuscated\")\n}\n}\n}\n</code></pre>"},{"location":"user-guide/configuration/registry/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>access</code> NpmAccess <code>NpmPublishExtension::access</code> <code>dry</code> NpmAccess <code>NpmPublishExtension::dry</code> <code>uri</code> URI <code>otp</code> String <code>authToken</code> String Property CLI System/Gradle Environment <code>access</code> <code>npm.publish.registry.&lt;name&gt;.access</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_ACCESS</code> <code>dry</code> <code>npm.publish.registry.&lt;name&gt;.dry</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_DRY</code> <code>uri</code> <code>npm.publish.registry.&lt;name&gt;.uri</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_URI</code> <code>otp</code> <code>npm.publish.registry.&lt;name&gt;.otp</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_OTP</code> <code>authToken</code> <code>npm.publish.registry.&lt;name&gt;.authToken</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_AUTHTOKEN</code> build.gradle.kts<pre><code>npmPublish {\nregistries {\nregister(\"npmjs\") {\naccess.set(RESTRICTED)\ndry.set(true)\nuri.set(uri(\"https://registry.npmjs.org\")) // (1)\notp.set(\"obfuscated\")\nauthToken.set(\"obfuscated\")\n}\n}\n}\n</code></pre> <ol> <li><code>uri</code> can also be set from String as <code>uri.set(\"https://registry.npmjs.org\")</code>      in which case the plugin will construct an URI instance from the string for you</li> </ol>"},{"location":"user-guide/configuration/registry/#access","title":"<code>access</code>","text":"<p>Registry access. More info</p>"},{"location":"user-guide/configuration/registry/#dry","title":"<code>dry</code>","text":"<p>Overrides NpmPublishExtension::dry value for this registry</p>"},{"location":"user-guide/configuration/registry/#uri","title":"<code>uri</code>","text":"<p>NPM registry uri to publish packages to. Should include schema domain and path if required. Can be set from <code>URI</code> or <code>String</code></p>"},{"location":"user-guide/configuration/registry/#otp","title":"<code>otp</code>","text":"<p>Optional OTP to use when authenticating with the registry</p>"},{"location":"user-guide/configuration/registry/#authtoken","title":"<code>authToken</code>","text":"<p>Auth token to use when authenticating with the registry. More info</p>"},{"location":"user-guide/tasks/NodeExecTask/","title":"NodeExecTask","text":""},{"location":"user-guide/tasks/NodeExecTask/#summary","title":"Summary","text":"<p>Basic task for executing various node commands. Provides access to node executable.</p> <p>The task can be created and configured in a <code>build.gradle.kts</code> file by registering it with correct type.</p> build.gradle.kts<pre><code>tasks {\nregister(\"name\", dev.petuska.npm.publish.task.NodeExecTask::class) {\n...\n}\n}\n</code></pre>"},{"location":"user-guide/tasks/NodeExecTask/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>nodeHome</code> DirectoryProperty <code>NODE_HOME</code> env variable <code>kotlinNodeJsSetup</code> task output Property CLI System/Gradle Environment <code>nodeHome</code> <code>--nodeHome</code> <code>NODE_HOME</code> build.gradle.kts<pre><code>tasks {\nregister(\"name\", dev.petuska.npm.publish.task.NodeExecTask::class) {\nnodeHome.set(layout.projectDirectory.dir(\"/usr/share/node\"))\ndoLast {\nval args = listOf(\"--help\")\nnodeExec(args)\n}\n}\n}\n</code></pre>"},{"location":"user-guide/tasks/NodeExecTask/#nodehome","title":"<code>nodeHome</code>","text":"<p>Base NodeJS directory used to extract other node executables from.</p>"},{"location":"user-guide/tasks/NpmAssembleTask/","title":"NpmAssembleTask","text":""},{"location":"user-guide/tasks/NpmAssembleTask/#summary","title":"Summary","text":"<p>A task to assemble all required files for a given NpmPackage. The task can be created and configured in a <code>build.gradle.kts</code> file by registering it with correct type.</p> build.gradle.kts<pre><code>tasks {\nregister(\"name\", dev.petuska.npm.publish.task.NpmAssembleTask::class) {\n...\n}\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmAssembleTask/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>package</code> NpmPackage <code>destinationDir</code> Directory <code>$buildDir/packages/&lt;package.name&gt;</code> Property CLI System/Gradle Environment <code>package</code> <code>destinationDir</code> <code>--destinationDir</code> build.gradle.kts<pre><code>tasks {\nregister(\"name\", dev.petuska.npm.publish.task.NpmAssembleTask::class) {\n`package` {\n...\n}\ndestinationDir.set(layout.buildDirectory.dir(\"js/main\"))\n}\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmAssembleTask/#package","title":"<code>package</code>","text":"<p>The configuration of the package to assemble.</p>"},{"location":"user-guide/tasks/NpmAssembleTask/#destinationdir","title":"<code>destinationDir</code>","text":"<p>Output directory to assemble the package to.</p>"},{"location":"user-guide/tasks/NpmExecTask/","title":"NpmExecTask","text":""},{"location":"user-guide/tasks/NpmExecTask/#summary","title":"Summary","text":"<p>Basic task for executing various npm commands. Extends NodeExecTask and provides access to npm executable.</p> <p>The task can be created and configured in a <code>build.gradle.kts</code> file by registering it with correct type.</p> build.gradle.kts<pre><code>tasks {\nregister(\"name\", dev.petuska.npm.publish.task.NpmExecTask::class) {\n...\n}\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmExecTask/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present Property CLI System/Gradle Environment build.gradle.kts<pre><code>tasks {\nregister(\"name\", dev.petuska.npm.publish.task.NpmExecTask::class) {\ndoLast {\nval args = listOf(\"--help\")\nnpmExec(args)\n}\n}\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmPackTask/","title":"NpmPackTask","text":""},{"location":"user-guide/tasks/NpmPackTask/#summary","title":"Summary","text":"<p>A task to pack a <code>.tgz</code> archive for the given package. Extends NpmExecTask.</p> <p>The task can be created and configured in a <code>build.gradle.kts</code> file by registering it with correct type.</p> build.gradle.kts<pre><code>tasks {\nregister(\"name\", dev.petuska.npm.publish.task.NpmPackTask::class) {\n...\n}\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmPackTask/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>packageDir</code> DirectoryProperty <code>dry</code> Boolean false <code>outputFile</code> RegularFile <code>$buildDir/packages/&lt;scope&gt;-&lt;name&gt;-&lt;version&gt;.tgz</code> Property CLI System/Gradle Environment <code>packageDir</code> <code>dry</code> <code>--dry</code> <code>outputFile</code> <code>--outputFile</code> build.gradle.kts<pre><code>tasks {\nregister(\"name\", dev.petuska.npm.publish.task.NpmPackTask::class) {\npackageDir.set(layout.projectDirectory.dir(\"src/main/js\"))\ndry.set(true)\noutputFile.set(layout.buildDirectory.dir(\"js/main\"))\n}\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmPackTask/#packagedir","title":"<code>packageDir</code>","text":"<p>The directory where the assembled and ready-to-pack package is.</p>"},{"location":"user-guide/tasks/NpmPackTask/#dry","title":"<code>dry</code>","text":"<p>Controls dry-tun mode for the execution. When enabled, npm pack command will be run with a switch that does everything it normally would except creating the tarball.</p>"},{"location":"user-guide/tasks/NpmPackTask/#outputfile","title":"<code>outputFile</code>","text":"<p>Output file to pack the publication to.</p>"},{"location":"user-guide/tasks/NpmPublishTask/","title":"NpmPublishTask","text":""},{"location":"user-guide/tasks/NpmPublishTask/#summary","title":"Summary","text":"<p>A task to publish a given NpmPackage to a given NpmRegistry. The task can be created and configured in a <code>build.gradle.kts</code> file by registering it with correct type.</p> build.gradle.kts<pre><code>tasks {\nregister(\"name\", dev.petuska.npm.publish.task.NpmPublishTask::class) {\n...\n}\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmPublishTask/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>registry</code> NpmRegistry <code>packageDir</code> Directory <code>dry</code> Boolean false <code>tag</code> String Property CLI System/Gradle Environment <code>registry</code> <code>packageDir</code> <code>dry</code> <code>--dry</code> <code>tag</code> <code>--tag</code> build.gradle.kts<pre><code>tasks {\nregister(\"name\", dev.petuska.npm.publish.task.NpmPublishTask::class) {\nregistry {\n...\n}\npackageDir.set(layout.projectDirectory.dir(\"src/main/js\"))\ndry.set(true)\ntag.set(\"latest\")\n}\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmPublishTask/#registry","title":"<code>registry</code>","text":"<p>A registry to publish to</p>"},{"location":"user-guide/tasks/NpmPublishTask/#packagedir","title":"<code>packageDir</code>","text":"<p>The directory where the assembled and ready-to-publish package is</p>"},{"location":"user-guide/tasks/NpmPublishTask/#dry","title":"<code>dry</code>","text":"<p>Controls dry-tun mode for the execution.</p>"},{"location":"user-guide/tasks/NpmPublishTask/#tag","title":"<code>tag</code>","text":"<p>Sets a tag to label published package version More info</p>"}]}