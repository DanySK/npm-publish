{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NPM-PUBLISH GRADLE PLUGIN DISCLAIMER: If you still depend on the old LEGACY Kotlin/JS compiler, please stick with npm-publish:2.1.x version. LEGACY backend support was dropped since npm-publish:3.0.0 . Gradle plugin enabling NPM publishing (essentially maven-publish for NPM packages). Integrates seamlessly with Kotlin/JS/MPP plugin if applied, providing auto configurations. Check the latest release for verified JVM, Kotlin and Gradle tooling versions Setup Here's a bare minimum setup when using together with one of the kotlin plugins. This setup would produce the following tasks: assembleJsPackage packJsPackage publishJsPackageToNpmjsRegistry build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 plugins { id ( \"dev.petuska.npm.publish\" ) version \"<VERSION>\" kotlin ( \"multiplatform\" ) version \"<VERSION>>\" // Optional, also supports \"js\" } kotlin { js ( IR ) { binaries . library () browser () // or nodejs() } } npmPublish { registries { register ( \"npmjs\" ) { uri . set ( \"https://registry.npmjs.org\" ) authToken . set ( \"obfuscated\" ) } } } Full documentation can be found on npm-publish.petuska.dev Contributing See CONTRIBUTING Thanks to all the people who contributed to npm-publish!","title":"Home"},{"location":"#npm-publish-gradle-plugin","text":"DISCLAIMER: If you still depend on the old LEGACY Kotlin/JS compiler, please stick with npm-publish:2.1.x version. LEGACY backend support was dropped since npm-publish:3.0.0 . Gradle plugin enabling NPM publishing (essentially maven-publish for NPM packages). Integrates seamlessly with Kotlin/JS/MPP plugin if applied, providing auto configurations. Check the latest release for verified JVM, Kotlin and Gradle tooling versions","title":"NPM-PUBLISH GRADLE PLUGIN"},{"location":"#setup","text":"Here's a bare minimum setup when using together with one of the kotlin plugins. This setup would produce the following tasks: assembleJsPackage packJsPackage publishJsPackageToNpmjsRegistry build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 plugins { id ( \"dev.petuska.npm.publish\" ) version \"<VERSION>\" kotlin ( \"multiplatform\" ) version \"<VERSION>>\" // Optional, also supports \"js\" } kotlin { js ( IR ) { binaries . library () browser () // or nodejs() } } npmPublish { registries { register ( \"npmjs\" ) { uri . set ( \"https://registry.npmjs.org\" ) authToken . set ( \"obfuscated\" ) } } } Full documentation can be found on npm-publish.petuska.dev","title":"Setup"},{"location":"#contributing","text":"See CONTRIBUTING Thanks to all the people who contributed to npm-publish!","title":"Contributing"},{"location":"CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased Verified Versions Kotlin: 1.8.0 Gradle: 7.5.1 JDK: 11 Added Changed Removed 3.2.0 - 2022-12-28 Verified Versions Kotlin: 1.8.0 Gradle: 7.5.1 JDK: 11 Added New samples project containing examples of various use-cases the plugin is able to cover. @DslMarkers to plugin's DSL to prevent incorrect nested property usage. Pull transitive npm dependencies from project dependencies via publicPackageJson New accessors for assemble and pack tasks inside package DSL KGP 1.8.0 support. Changed Fix #73: nodeHome override not working when used with kotlin plugin Removed Support for KGP < 1.8.0!!! DO NOT UPGRADE IF YOU'RE ON OLDER KOTLIN VERSION 3.1.0 - 2022-11-07 Verified Versions Kotlin: 1.6.21 Gradle: 7.5.1 JDK: 11 Added Changed Updated dependency versions Configuration cache support Removed 3.0.1 - 2022-06-27 Verified Versions Kotlin: 1.7.0 Gradle: 7.4.2 JDK: 11 Added Changed Kotlin version bumped to 1.7.0 Downgraded language version to 1.4 for better gradle support Removed 3.0.0 - 2022-05-03 Verified Versions Kotlin: 1.6.21 Gradle: 7.4.2 JDK: 11 Added New documentation site Functional and Integration test coverage Gradle caching support for configuration, NpmAssembleTask and NpmPackTask (including remote caches) Detekt analyser and formatter Changed Kotlin plugin version bumped to 1.6.20 npmPublishing extension renamed to npmPublish Default packaging directories changed from build/publications/npm to build/packages publication and repository DSLs removed. Use regular gradle's register DSL All API reworked to use gradle provider API. Replace all = assignments with proper .set() invocation. NpmPackageAssembleTask renamed to NpmAssembleTask NpmPackage::moduleName renamed to NpmPackage::packageName NpmPackage::nodeJsDir renamed to nodeHome and moved to NpmPublishExtension . It is now shared across all publications. NpmPackage::destinationDir moved to NpmAssembleTask . NpmRegistry::dry propagated to NpmPackTask and NpmPublishTask with --dry cli option added. Both still default to NpmPublishExtension::dry All plugin tasks made a lot more abstract and reusable. Especially NodeExecTask and NpmExecTask allowing for custom npm script execution on your packages or any other generic tooling. Removed Support for LEGACY compiler. Stick with 2.1.x if you still depend on it. All eager configuration Custom kotlin delegates for gradle lazy api dev.petuska:kon dependency dev.petuska:gradle-lazy-delegates dependency dev.petuska:klip dependency All kotest dependencies Spotless plugin 2.1.2 - 2022-01-24 Verified Versions Kotlin: 1.6.10 Gradle: 7.3.3 JDK: 11 Added Changed Kotlin plugin version bumped to 1.6.10 Simplified JsonObject DSL builders by rebasing it onto dev.petuska:kon Implemented proper nested package.json template merging Rolled back to good old ktlint formatting Removed 2.1.1 - 2021-09-02 Verified Versions Kotlin: 1.5.30 Gradle: 7.2.0 JDK: 11 Added Sample GH action introduced to showcase CI publishing Changed Fixed #24: types configuration property was ignored Reworked ts-consumer to showcase module inter-dependencies Removed 2.1.0 - 2021-08-22 Verified Versions Kotlin: 1.5.21 Gradle: 7.2.0 JDK: 11 Added Added support for setting configuration properties via environment variables too Changed Fixed #24: types configuration property was ignored Kotlin version bumped to 1.5.21 Removed 2.0.4 - 2021-07-21 Verified Versions Kotlin: 1.5.10 Gradle: 7.1.1 JDK: 11 Added New sandbox module to check that plugin can work with both, nodejs() and browser() flavours at the same time New ts-consumer module in the sandbox to showcase how to include packed K/JS modules into plain TS module Dynamic version ranges for increased compatibility Changed Updated versions Fixed a bug that always expected version to be a string Removed Removed some duplicated code in sandbox 2.0.3 - 2021-06-18 Verified Versions Kotlin: 1.5.10 Gradle: 7.0.2 JDK: 11 Added Changed #19 licence field typo fix to get it working with npm (big thanks to @gaebel) Removed 2.0.2 - 2021-06-09 Verified Versions Kotlin: 1.5.10 Gradle: 7.0.2 JDK: 11 Added Changed #16 Fix NpmPublishTask workingDir scope Removed 2.0.1 - 2021-05-28 Verified Versions Kotlin: 1.5.10 Gradle: 7.0.2 JDK: 11 Added Changed Eased duplicationRules for assemble task. Will now warn instead of fail. Removed 2.0.0 - 2021-05-25 Verified Versions Kotlin: 1.5.10 Gradle: 7.0.2 JDK: 11 Added Changed Plugin id changed from lt.petuska.npm.publish to dev.petuska.npm.publish Root package changed to dev.petuska.npm.publish . To migrate, just replace lt. part to dev. in all imports you might have (tasks, DSL, etc...) Removed","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"CHANGELOG/#verified-versions","text":"Kotlin: 1.8.0 Gradle: 7.5.1 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added","text":"","title":"Added"},{"location":"CHANGELOG/#changed","text":"","title":"Changed"},{"location":"CHANGELOG/#removed","text":"","title":"Removed"},{"location":"CHANGELOG/#320-2022-12-28","text":"","title":"3.2.0 - 2022-12-28"},{"location":"CHANGELOG/#verified-versions_1","text":"Kotlin: 1.8.0 Gradle: 7.5.1 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_1","text":"New samples project containing examples of various use-cases the plugin is able to cover. @DslMarkers to plugin's DSL to prevent incorrect nested property usage. Pull transitive npm dependencies from project dependencies via publicPackageJson New accessors for assemble and pack tasks inside package DSL KGP 1.8.0 support.","title":"Added"},{"location":"CHANGELOG/#changed_1","text":"Fix #73: nodeHome override not working when used with kotlin plugin","title":"Changed"},{"location":"CHANGELOG/#removed_1","text":"Support for KGP < 1.8.0!!! DO NOT UPGRADE IF YOU'RE ON OLDER KOTLIN VERSION","title":"Removed"},{"location":"CHANGELOG/#310-2022-11-07","text":"","title":"3.1.0 - 2022-11-07"},{"location":"CHANGELOG/#verified-versions_2","text":"Kotlin: 1.6.21 Gradle: 7.5.1 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_2","text":"","title":"Added"},{"location":"CHANGELOG/#changed_2","text":"Updated dependency versions Configuration cache support","title":"Changed"},{"location":"CHANGELOG/#removed_2","text":"","title":"Removed"},{"location":"CHANGELOG/#301-2022-06-27","text":"","title":"3.0.1 - 2022-06-27"},{"location":"CHANGELOG/#verified-versions_3","text":"Kotlin: 1.7.0 Gradle: 7.4.2 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_3","text":"","title":"Added"},{"location":"CHANGELOG/#changed_3","text":"Kotlin version bumped to 1.7.0 Downgraded language version to 1.4 for better gradle support","title":"Changed"},{"location":"CHANGELOG/#removed_3","text":"","title":"Removed"},{"location":"CHANGELOG/#300-2022-05-03","text":"","title":"3.0.0 - 2022-05-03"},{"location":"CHANGELOG/#verified-versions_4","text":"Kotlin: 1.6.21 Gradle: 7.4.2 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_4","text":"New documentation site Functional and Integration test coverage Gradle caching support for configuration, NpmAssembleTask and NpmPackTask (including remote caches) Detekt analyser and formatter","title":"Added"},{"location":"CHANGELOG/#changed_4","text":"Kotlin plugin version bumped to 1.6.20 npmPublishing extension renamed to npmPublish Default packaging directories changed from build/publications/npm to build/packages publication and repository DSLs removed. Use regular gradle's register DSL All API reworked to use gradle provider API. Replace all = assignments with proper .set() invocation. NpmPackageAssembleTask renamed to NpmAssembleTask NpmPackage::moduleName renamed to NpmPackage::packageName NpmPackage::nodeJsDir renamed to nodeHome and moved to NpmPublishExtension . It is now shared across all publications. NpmPackage::destinationDir moved to NpmAssembleTask . NpmRegistry::dry propagated to NpmPackTask and NpmPublishTask with --dry cli option added. Both still default to NpmPublishExtension::dry All plugin tasks made a lot more abstract and reusable. Especially NodeExecTask and NpmExecTask allowing for custom npm script execution on your packages or any other generic tooling.","title":"Changed"},{"location":"CHANGELOG/#removed_4","text":"Support for LEGACY compiler. Stick with 2.1.x if you still depend on it. All eager configuration Custom kotlin delegates for gradle lazy api dev.petuska:kon dependency dev.petuska:gradle-lazy-delegates dependency dev.petuska:klip dependency All kotest dependencies Spotless plugin","title":"Removed"},{"location":"CHANGELOG/#212-2022-01-24","text":"","title":"2.1.2 - 2022-01-24"},{"location":"CHANGELOG/#verified-versions_5","text":"Kotlin: 1.6.10 Gradle: 7.3.3 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_5","text":"","title":"Added"},{"location":"CHANGELOG/#changed_5","text":"Kotlin plugin version bumped to 1.6.10 Simplified JsonObject DSL builders by rebasing it onto dev.petuska:kon Implemented proper nested package.json template merging Rolled back to good old ktlint formatting","title":"Changed"},{"location":"CHANGELOG/#removed_5","text":"","title":"Removed"},{"location":"CHANGELOG/#211-2021-09-02","text":"","title":"2.1.1 - 2021-09-02"},{"location":"CHANGELOG/#verified-versions_6","text":"Kotlin: 1.5.30 Gradle: 7.2.0 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_6","text":"Sample GH action introduced to showcase CI publishing","title":"Added"},{"location":"CHANGELOG/#changed_6","text":"Fixed #24: types configuration property was ignored Reworked ts-consumer to showcase module inter-dependencies","title":"Changed"},{"location":"CHANGELOG/#removed_6","text":"","title":"Removed"},{"location":"CHANGELOG/#210-2021-08-22","text":"","title":"2.1.0 - 2021-08-22"},{"location":"CHANGELOG/#verified-versions_7","text":"Kotlin: 1.5.21 Gradle: 7.2.0 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_7","text":"Added support for setting configuration properties via environment variables too","title":"Added"},{"location":"CHANGELOG/#changed_7","text":"Fixed #24: types configuration property was ignored Kotlin version bumped to 1.5.21","title":"Changed"},{"location":"CHANGELOG/#removed_7","text":"","title":"Removed"},{"location":"CHANGELOG/#204-2021-07-21","text":"","title":"2.0.4 - 2021-07-21"},{"location":"CHANGELOG/#verified-versions_8","text":"Kotlin: 1.5.10 Gradle: 7.1.1 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_8","text":"New sandbox module to check that plugin can work with both, nodejs() and browser() flavours at the same time New ts-consumer module in the sandbox to showcase how to include packed K/JS modules into plain TS module Dynamic version ranges for increased compatibility","title":"Added"},{"location":"CHANGELOG/#changed_8","text":"Updated versions Fixed a bug that always expected version to be a string","title":"Changed"},{"location":"CHANGELOG/#removed_8","text":"Removed some duplicated code in sandbox","title":"Removed"},{"location":"CHANGELOG/#203-2021-06-18","text":"","title":"2.0.3 - 2021-06-18"},{"location":"CHANGELOG/#verified-versions_9","text":"Kotlin: 1.5.10 Gradle: 7.0.2 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_9","text":"","title":"Added"},{"location":"CHANGELOG/#changed_9","text":"#19 licence field typo fix to get it working with npm (big thanks to @gaebel)","title":"Changed"},{"location":"CHANGELOG/#removed_9","text":"","title":"Removed"},{"location":"CHANGELOG/#202-2021-06-09","text":"","title":"2.0.2 - 2021-06-09"},{"location":"CHANGELOG/#verified-versions_10","text":"Kotlin: 1.5.10 Gradle: 7.0.2 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_10","text":"","title":"Added"},{"location":"CHANGELOG/#changed_10","text":"#16 Fix NpmPublishTask workingDir scope","title":"Changed"},{"location":"CHANGELOG/#removed_10","text":"","title":"Removed"},{"location":"CHANGELOG/#201-2021-05-28","text":"","title":"2.0.1 - 2021-05-28"},{"location":"CHANGELOG/#verified-versions_11","text":"Kotlin: 1.5.10 Gradle: 7.0.2 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_11","text":"","title":"Added"},{"location":"CHANGELOG/#changed_11","text":"Eased duplicationRules for assemble task. Will now warn instead of fail.","title":"Changed"},{"location":"CHANGELOG/#removed_11","text":"","title":"Removed"},{"location":"CHANGELOG/#200-2021-05-25","text":"","title":"2.0.0 - 2021-05-25"},{"location":"CHANGELOG/#verified-versions_12","text":"Kotlin: 1.5.10 Gradle: 7.0.2 JDK: 11","title":"Verified Versions"},{"location":"CHANGELOG/#added_12","text":"","title":"Added"},{"location":"CHANGELOG/#changed_12","text":"Plugin id changed from lt.petuska.npm.publish to dev.petuska.npm.publish Root package changed to dev.petuska.npm.publish . To migrate, just replace lt. part to dev. in all imports you might have (tasks, DSL, etc...)","title":"Changed"},{"location":"CHANGELOG/#removed_12","text":"","title":"Removed"},{"location":"CONTRIBUTING/","text":"","title":"CONTRIBUTING"},{"location":"LICENSE/","text":"1 2 3 Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. 1 2 3 4 5 6 7 8 To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"{}\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2020 dev.petuska Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at 1 http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"user-guide/","text":"While the automatic default configuration should cover most of the use-cases, it might still come short for some projects. Worry not, npm-publish is highly customisable, allowing you to tweak anything you wish. The following pages will cover all the configuration options available, their defaults and intended use.","title":"User Guide"},{"location":"user-guide/quick-start/","text":"Here's a bare minimum setup when using the plugin standalone or together with one of the kotlin plugins. Kotlin/MPP Kotlin/JS Standalone build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 plugins { id ( \"dev.petuska.npm.publish\" ) version \"<VERSION>\" kotlin ( \"multiplatform\" ) version \"<VERSION>>\" } kotlin { js ( IR ) { binaries . library () browser () // (1) } } npmPublish { registries { register ( \"npmjs\" ) { uri . set ( uri ( \"https://registry.npmjs.org\" )) // (2) authToken . set ( \"obfuscated\" ) } } } nodejs() works too uri can also be set from String as uri.set(\"https://registry.npmjs.org\") in which case the plugin will construct an URI instance from the string for you build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 plugins { id ( \"dev.petuska.npm.publish\" ) version \"<VERSION>\" kotlin ( \"js\" ) version \"<VERSION>>\" } kotlin { js ( IR ) { binaries . library () browser () // (1) } } npmPublish { registries { register ( \"npmjs\" ) { uri . set ( uri ( \"https://registry.npmjs.org\" )) // (2) authToken . set ( \"obfuscated\" ) } } } nodejs() works too uri can also be set from String as uri.set(\"https://registry.npmjs.org\") in which case the plugin will construct an URI instance from the string for you build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 plugins { id ( \"dev.petuska.npm.publish\" ) version \"<VERSION>\" } npmPublish { packages { register ( \"js\" ) { ... } } registries { register ( \"npmjs\" ) { uri . set ( uri ( \"https://registry.npmjs.org\" )) // (1) authToken . set ( \"obfuscated\" ) } } } uri can also be set from String as uri.set(\"https://registry.npmjs.org\") in which case the plugin will construct an URI instance from the string for you This setup would produce the following tasks: assembleJsNpmPackage: NpmAssembleTask packJsNpmPackage: NpmPackTask publishJsPackageToNpmjsRegistry: NpmPublishTask Info One publish task is created for every package + registry combination. The task is named as publish<PackageName>PackageTo<RegistryName>Registry","title":"Quick Start"},{"location":"user-guide/configuration/","text":"Summary Most of the configurations are hooked up to flow downstream to the eventual task configurations in the priority order, where each layer looks up the chain for default value if an explicit value is not configured for it. This allows setting default values for a lot of downstream configurations once and overriding them only where needed. Configuration Layers The configuration values are resolved in the following descending priority order: Properties CLI options ( --arg=value ) System properties ( -Dprop=value ) Gradle properties ( -Pprop=value , ORG_GRADLE_PROJECT_prop=value env variable, -Dorg.gradle.project.prop=value system property or prop=value stored in gradle.properties file) Env variables ( PROP=value ) Extension Package / Registry Tasks Important The layering only works for properties that have no explicit values set via the DSL as doing so overrides any layering or default behaviour.","title":"Configuration"},{"location":"user-guide/configuration/#summary","text":"Most of the configurations are hooked up to flow downstream to the eventual task configurations in the priority order, where each layer looks up the chain for default value if an explicit value is not configured for it. This allows setting default values for a lot of downstream configurations once and overriding them only where needed.","title":"Summary"},{"location":"user-guide/configuration/#configuration-layers","text":"The configuration values are resolved in the following descending priority order: Properties CLI options ( --arg=value ) System properties ( -Dprop=value ) Gradle properties ( -Pprop=value , ORG_GRADLE_PROJECT_prop=value env variable, -Dorg.gradle.project.prop=value system property or prop=value stored in gradle.properties file) Env variables ( PROP=value ) Extension Package / Registry Tasks Important The layering only works for properties that have no explicit values set via the DSL as doing so overrides any layering or default behaviour.","title":"Configuration Layers"},{"location":"user-guide/configuration/extension/","text":"Summary The plugin registers a top level npmPublish: NpmPublishExtension extension for the project as a main entrypoint for most of the plugin configuration options. The extension can be accessed and configured from a build.gradle.kts file by invoking its name. build.gradle.kts 1 2 3 npmPublish { ... } Properties Properties Keys Usage Property Type Default When Kotlin plugin is present nodeHome Directory NODE_HOME env variable kotlinNodeJsSetup task output readme RegularFile npmIgnore RegularFile $projectDir/.npmignore organization String version String Project::version access NpmAccess NpmAccess.PUBLIC dry Boolean false packages NpmPackages registries NpmRegistries Property CLI System/Gradle Environment nodeHome npm.publish.nodeHome NPM_PUBLISH_NODEHOME readme npm.publish.readme NPM_PUBLISH_README npmIgnore npm.publish.npmIgnore NPM_PUBLISH_NPMIGNORE organization npm.publish.organization NPM_PUBLISH_ORGANIZATION version npm.publish.version NPM_PUBLISH_VERSION access npm.publish.access NPM_PUBLISH_ACCESS dry npm.publish.dry NPM_PUBLISH_DRY packages registries build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 npmPublish { nodeHome . set ( File ( \"/path/to/node\" )) readme . set ( rootDir . resolve ( \"README.md\" )) npmIgnore . set ( projectDir . resolve ( \".npmIgnore\" )) organization . set ( \" ${ project . group } \" ) version . set ( \" ${ project . version } \" ) access . set ( RESTRICTED ) dry . set ( true ) packages { ... } registries { ... } } nodeHome Default NodeJS directory to be used when executing npm commands. readme A location of the default README.md file. If set, it will be used as a default for all packages that do not have one set explicitly. The file name is ignored and renamed to README.md when assembling. npmIgnore A location of the default .npmignore file. If set, it will be used as a default for all packages that do not have one set explicitly. organization Default package scope. If set, it will be used as a default for all packages that do not have one set explicitly. version Default package version. If set, it will be used as a default for all packages that do not have one set explicitly. access Default package access when publishing to npm registries. More info dry Specifies if a dry-run should be added to the npm command arguments by default. Dry run does all the normal run does, but without making any modifications to local or remote files. packages A container for npm package configurations. See Package for detailed description of the container entities. registries A container for npm registry configurations. See Registry for detailed description of the container entities.","title":"Extension"},{"location":"user-guide/configuration/extension/#summary","text":"The plugin registers a top level npmPublish: NpmPublishExtension extension for the project as a main entrypoint for most of the plugin configuration options. The extension can be accessed and configured from a build.gradle.kts file by invoking its name. build.gradle.kts 1 2 3 npmPublish { ... }","title":"Summary"},{"location":"user-guide/configuration/extension/#properties","text":"Properties Keys Usage Property Type Default When Kotlin plugin is present nodeHome Directory NODE_HOME env variable kotlinNodeJsSetup task output readme RegularFile npmIgnore RegularFile $projectDir/.npmignore organization String version String Project::version access NpmAccess NpmAccess.PUBLIC dry Boolean false packages NpmPackages registries NpmRegistries Property CLI System/Gradle Environment nodeHome npm.publish.nodeHome NPM_PUBLISH_NODEHOME readme npm.publish.readme NPM_PUBLISH_README npmIgnore npm.publish.npmIgnore NPM_PUBLISH_NPMIGNORE organization npm.publish.organization NPM_PUBLISH_ORGANIZATION version npm.publish.version NPM_PUBLISH_VERSION access npm.publish.access NPM_PUBLISH_ACCESS dry npm.publish.dry NPM_PUBLISH_DRY packages registries build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 npmPublish { nodeHome . set ( File ( \"/path/to/node\" )) readme . set ( rootDir . resolve ( \"README.md\" )) npmIgnore . set ( projectDir . resolve ( \".npmIgnore\" )) organization . set ( \" ${ project . group } \" ) version . set ( \" ${ project . version } \" ) access . set ( RESTRICTED ) dry . set ( true ) packages { ... } registries { ... } }","title":"Properties"},{"location":"user-guide/configuration/extension/#nodehome","text":"Default NodeJS directory to be used when executing npm commands.","title":"nodeHome"},{"location":"user-guide/configuration/extension/#readme","text":"A location of the default README.md file. If set, it will be used as a default for all packages that do not have one set explicitly. The file name is ignored and renamed to README.md when assembling.","title":"readme"},{"location":"user-guide/configuration/extension/#npmignore","text":"A location of the default .npmignore file. If set, it will be used as a default for all packages that do not have one set explicitly.","title":"npmIgnore"},{"location":"user-guide/configuration/extension/#organization","text":"Default package scope. If set, it will be used as a default for all packages that do not have one set explicitly.","title":"organization"},{"location":"user-guide/configuration/extension/#version","text":"Default package version. If set, it will be used as a default for all packages that do not have one set explicitly.","title":"version"},{"location":"user-guide/configuration/extension/#access","text":"Default package access when publishing to npm registries. More info","title":"access"},{"location":"user-guide/configuration/extension/#dry","text":"Specifies if a dry-run should be added to the npm command arguments by default. Dry run does all the normal run does, but without making any modifications to local or remote files.","title":"dry"},{"location":"user-guide/configuration/extension/#packages","text":"A container for npm package configurations. See Package for detailed description of the container entities.","title":"packages"},{"location":"user-guide/configuration/extension/#registries","text":"A container for npm registry configurations. See Registry for detailed description of the container entities.","title":"registries"},{"location":"user-guide/configuration/package/","text":"Summary The packages configure the npm bundles. For each configured NpmPackage assemble<PackageName>Package NpmAssembleTask and pack<PackageName>Package NpmPackTask tasks will be generated and added as dependencies to the assemble and pack lifecycle tasks respectively. The packages can be accessed and configured from a build.gradle.kts file via npmPublish::packages invocation. build.gradle.kts 1 2 3 4 5 npmPublish { packages { ... } } package.json Resolution During the package assembly, a package.json file is generated from various configuration options. For convenience, some key properties of the file are exposed as a top-level package configurations (such as main ). These configurations can be overridden via packageJson DSL, which exposes the entire package.json file structure and allows unrestricted customisation. Alternatively, you could opt in to use packageJsonFile instead, which short-circuits the entire resolution process and instead uses provided static package.json file, fully disregarding all the other package.json configurations. Finally, packageJsonTemplateFile option provides a way to get the best of both worlds. When set, the provided template file will be used as a baseline on which top-level and packageJson DSL configurations are applied. This way you could setup a static part of your package.json file from within the template and only manage dynamic parts such as version and dependencies from the package DSL. Dependency Resolution NPM dependencies detected/declared for each publication are resolved into relevant package.json dependency block by this priority order (descending priority): Optional Peer Dev Normal This ensures that any given dependency does not appear in multiple dependency scopes. Properties Properties Keys Usage Property Type Default When Kotlin plugin is present scope String NpmPublishExtension::organization packageName String Project::name version String NpmPublishExtension::version main String Target's Kotlin2JsCompile::outputFile types String Target's Kotlin2JsCompile::outputFile::nameWithoutExtension + .d.ts readme RegularFile NpmPublishExtension::readme npmIgnore RegularFile NpmPublishExtension::npmIgnore files ConfigurableFileCollection Target's Kotlin2JsCompile and processResources task outputs packageJson PackageJson packageJsonFile RegularFile packageJsonTemplateFile RegularFile dependencies NpmDependencies Target compilations' dependencies Property CLI System/Gradle Environment scope npm.publish.package.<name>.scope NPM_PUBLISH_PACKAGE_<NAME>_SCOPE packageName npm.publish.package.<name>.packageName NPM_PUBLISH_PACKAGE_<NAME>_PACKAGENAME version npm.publish.package.<name>.version NPM_PUBLISH_PACKAGE_<NAME>_VERSION main npm.publish.package.<name>.main NPM_PUBLISH_PACKAGE_<NAME>_MAIN types npm.publish.package.<name>.types NPM_PUBLISH_PACKAGE_<NAME>_TYPES readme npm.publish.package.<name>.readme NPM_PUBLISH_PACKAGE_<NAME>_README npmIgnore npm.publish.package.<name>.npmIgnore NPM_PUBLISH_PACKAGE_<NAME>_NPMIGNORE files packageJson packageJsonFile npm.publish.package.<name>.packageJsonFile NPM_PUBLISH_PACKAGE_<NAME>_PACKAGEJSONFILE packageJsonTemplateFile npm.publish.package.<name>.packageJsonTemplateFile NPM_PUBLISH_PACKAGE_<NAME>_PACKAGEJSONTEMPLATEFILE dependencies build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 npmPublish { packages { register ( \"js\" ) { scope . set ( group as String ) packageName . set ( \"coolio\" ) version . set ( \"4.20.69\" ) main . set ( \"main.js\" ) types . set ( \"main.d.ts\" ) readme . set ( rootDir . resolve ( \"README.md\" )) npmIgnore . set ( rootDir . resolve ( \".npmignore\" )) files { from ( \"some/path\" ) } packageJson { ... } packageJsonFile . set ( projectDir . resolve ( \"package.json\" )) packageJsonTemplateFile . set ( projectDir . resolve ( \"package.template.json\" )) dependencies { optional ( \"axios\" , \"*\" ) peer ( \"axios\" , \"*\" ) dev ( \"axios\" , \"*\" ) normal ( \"axios\" , \"*\" ) } } } } scope Optional npm scope. If set, the package name will be constructed as @{scope}/{packageName} packageName NPM package name. Can be overridden via packageJson DSL's name property version NPM package name. Can be overridden via packageJson DSL's version property main Main .js entry file relative to the package.json file. Can be overridden via packageJson DSL's main property types Main .d.ts entry file relative to the package.json file. Can be overridden via packageJson DSL's types property readme A location of the README.md file. If set, the file will be moved to package assembly root and renamed to README.md (regardless of the actual name). npmIgnore A location of the .npmignore file. files Specification of files that should be assembled for this package. It uses standard Gradle's CopySpec to declare copying hierarchies and filtering rules. More info packageJson package.json customisation container. All values set here will override top-level configurations like types The container is modelled on top of Map-like structure with additional standard package.json fields added as explicit properties. This means that not only you can configure standard package.json file in a type-safe manner, but also add arbitrary fields of your own. build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 npmPublish { packages { named ( \"js\" ) { packageJson { \"customNestedObject\" by { \"nestedField\" by \"ok\" } \"customArray\" by arrayOf ( 1 , 2 , 3 ) \"customObjectArray\" by arrayOf ( json { \"nestedField\" by 1 }) \"customField\" by true } } } } packageJsonFile Path to a static package.json file. If set, fully disregards all related package.json configurations and is used as-is. packageJsonTemplateFile Path to a baseline package.json template file. Similar to packageJsonFile except allows the options to be overridden by the packageJson and top-level options. dependencies Package's npm dependency container. It can be configured by invoking the property and using provided , optional , peer , dev and normal DSLs. build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 npmPublish { packages { named ( \"js\" ) { dependencies { optional ( \"axios\" , \"*\" ) peer ( \"axios\" , \"*\" ) dev ( \"axios\" , \"*\" ) normal ( \"axios\" , \"*\" ) } } } } Info Dependencies are deduplicated during resolution to avoid multiple occurrences of a dependency across different dependency scopes","title":"Package"},{"location":"user-guide/configuration/package/#summary","text":"The packages configure the npm bundles. For each configured NpmPackage assemble<PackageName>Package NpmAssembleTask and pack<PackageName>Package NpmPackTask tasks will be generated and added as dependencies to the assemble and pack lifecycle tasks respectively. The packages can be accessed and configured from a build.gradle.kts file via npmPublish::packages invocation. build.gradle.kts 1 2 3 4 5 npmPublish { packages { ... } }","title":"Summary"},{"location":"user-guide/configuration/package/#packagejson-resolution","text":"During the package assembly, a package.json file is generated from various configuration options. For convenience, some key properties of the file are exposed as a top-level package configurations (such as main ). These configurations can be overridden via packageJson DSL, which exposes the entire package.json file structure and allows unrestricted customisation. Alternatively, you could opt in to use packageJsonFile instead, which short-circuits the entire resolution process and instead uses provided static package.json file, fully disregarding all the other package.json configurations. Finally, packageJsonTemplateFile option provides a way to get the best of both worlds. When set, the provided template file will be used as a baseline on which top-level and packageJson DSL configurations are applied. This way you could setup a static part of your package.json file from within the template and only manage dynamic parts such as version and dependencies from the package DSL.","title":"package.json Resolution"},{"location":"user-guide/configuration/package/#dependency-resolution","text":"NPM dependencies detected/declared for each publication are resolved into relevant package.json dependency block by this priority order (descending priority): Optional Peer Dev Normal This ensures that any given dependency does not appear in multiple dependency scopes.","title":"Dependency Resolution"},{"location":"user-guide/configuration/package/#properties","text":"Properties Keys Usage Property Type Default When Kotlin plugin is present scope String NpmPublishExtension::organization packageName String Project::name version String NpmPublishExtension::version main String Target's Kotlin2JsCompile::outputFile types String Target's Kotlin2JsCompile::outputFile::nameWithoutExtension + .d.ts readme RegularFile NpmPublishExtension::readme npmIgnore RegularFile NpmPublishExtension::npmIgnore files ConfigurableFileCollection Target's Kotlin2JsCompile and processResources task outputs packageJson PackageJson packageJsonFile RegularFile packageJsonTemplateFile RegularFile dependencies NpmDependencies Target compilations' dependencies Property CLI System/Gradle Environment scope npm.publish.package.<name>.scope NPM_PUBLISH_PACKAGE_<NAME>_SCOPE packageName npm.publish.package.<name>.packageName NPM_PUBLISH_PACKAGE_<NAME>_PACKAGENAME version npm.publish.package.<name>.version NPM_PUBLISH_PACKAGE_<NAME>_VERSION main npm.publish.package.<name>.main NPM_PUBLISH_PACKAGE_<NAME>_MAIN types npm.publish.package.<name>.types NPM_PUBLISH_PACKAGE_<NAME>_TYPES readme npm.publish.package.<name>.readme NPM_PUBLISH_PACKAGE_<NAME>_README npmIgnore npm.publish.package.<name>.npmIgnore NPM_PUBLISH_PACKAGE_<NAME>_NPMIGNORE files packageJson packageJsonFile npm.publish.package.<name>.packageJsonFile NPM_PUBLISH_PACKAGE_<NAME>_PACKAGEJSONFILE packageJsonTemplateFile npm.publish.package.<name>.packageJsonTemplateFile NPM_PUBLISH_PACKAGE_<NAME>_PACKAGEJSONTEMPLATEFILE dependencies build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 npmPublish { packages { register ( \"js\" ) { scope . set ( group as String ) packageName . set ( \"coolio\" ) version . set ( \"4.20.69\" ) main . set ( \"main.js\" ) types . set ( \"main.d.ts\" ) readme . set ( rootDir . resolve ( \"README.md\" )) npmIgnore . set ( rootDir . resolve ( \".npmignore\" )) files { from ( \"some/path\" ) } packageJson { ... } packageJsonFile . set ( projectDir . resolve ( \"package.json\" )) packageJsonTemplateFile . set ( projectDir . resolve ( \"package.template.json\" )) dependencies { optional ( \"axios\" , \"*\" ) peer ( \"axios\" , \"*\" ) dev ( \"axios\" , \"*\" ) normal ( \"axios\" , \"*\" ) } } } }","title":"Properties"},{"location":"user-guide/configuration/package/#scope","text":"Optional npm scope. If set, the package name will be constructed as @{scope}/{packageName}","title":"scope"},{"location":"user-guide/configuration/package/#packagename","text":"NPM package name. Can be overridden via packageJson DSL's name property","title":"packageName"},{"location":"user-guide/configuration/package/#version","text":"NPM package name. Can be overridden via packageJson DSL's version property","title":"version"},{"location":"user-guide/configuration/package/#main","text":"Main .js entry file relative to the package.json file. Can be overridden via packageJson DSL's main property","title":"main"},{"location":"user-guide/configuration/package/#types","text":"Main .d.ts entry file relative to the package.json file. Can be overridden via packageJson DSL's types property","title":"types"},{"location":"user-guide/configuration/package/#readme","text":"A location of the README.md file. If set, the file will be moved to package assembly root and renamed to README.md (regardless of the actual name).","title":"readme"},{"location":"user-guide/configuration/package/#npmignore","text":"A location of the .npmignore file.","title":"npmIgnore"},{"location":"user-guide/configuration/package/#files","text":"Specification of files that should be assembled for this package. It uses standard Gradle's CopySpec to declare copying hierarchies and filtering rules. More info","title":"files"},{"location":"user-guide/configuration/package/#packagejson","text":"package.json customisation container. All values set here will override top-level configurations like types The container is modelled on top of Map-like structure with additional standard package.json fields added as explicit properties. This means that not only you can configure standard package.json file in a type-safe manner, but also add arbitrary fields of your own. build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 npmPublish { packages { named ( \"js\" ) { packageJson { \"customNestedObject\" by { \"nestedField\" by \"ok\" } \"customArray\" by arrayOf ( 1 , 2 , 3 ) \"customObjectArray\" by arrayOf ( json { \"nestedField\" by 1 }) \"customField\" by true } } } }","title":"packageJson"},{"location":"user-guide/configuration/package/#packagejsonfile","text":"Path to a static package.json file. If set, fully disregards all related package.json configurations and is used as-is.","title":"packageJsonFile"},{"location":"user-guide/configuration/package/#packagejsontemplatefile","text":"Path to a baseline package.json template file. Similar to packageJsonFile except allows the options to be overridden by the packageJson and top-level options.","title":"packageJsonTemplateFile"},{"location":"user-guide/configuration/package/#dependencies","text":"Package's npm dependency container. It can be configured by invoking the property and using provided , optional , peer , dev and normal DSLs. build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 npmPublish { packages { named ( \"js\" ) { dependencies { optional ( \"axios\" , \"*\" ) peer ( \"axios\" , \"*\" ) dev ( \"axios\" , \"*\" ) normal ( \"axios\" , \"*\" ) } } } } Info Dependencies are deduplicated during resolution to avoid multiple occurrences of a dependency across different dependency scopes","title":"dependencies"},{"location":"user-guide/configuration/properties/","text":"Summary Most of the configuration options are set to be configurable via various CLI inputs and follow a configuration layers order. Such CLI properties can be passed in four different ways - Gradle CLI Options , System Properties , Gradle Extra Properties , Gradle Properties and Environment Variables . Gradle CLI Options Gradle CLI options are only available for the tasks and can be passed in by specifying their keys prefixed with double hyphens ( -- ) right after the task name. Boolean properties can omit the value when representing true states. /bin/bash 1 ./gradlew publishJsPackageToNpmjsRegistry --dry --authToken = \"obfuscated\" System Properties System properties are only available for the configurations and can be passed in by specifying their keys prefixed with -D anywhere on the command line. Boolean properties can omit the value when representing true states. /bin/bash 1 ./gradlew publishJsPackageToNpmjsRegistry -Dnpm.publish.registry.npmjs.dry -Dnpm.publish.registry.npmjs.authToken = \"obfuscated\" Gradle Extra Properties Gradle extra properties are only available for the configurations and can be passed in via extra project extension. This can be useful for multi-module builds that needs to configure other modules from submodules. Boolean properties can omit the value when representing true states. build.gradle.kts 1 2 extra . properties [ \"npm.publish.registry.npmjs.dry\" ] = null extra . properties [ \"npm.publish.registry.npmjs.authToken\" ] = \"obfuscated\" Gradle Properties Gradle properties are only available for the configurations and can be passed in by specifying their keys prefixed with -P anywhere on the command line or via the gradle.properties file. Boolean properties can omit the value when representing true states. CLI gradle.properties /bin/bash 1 ./gradlew publishJsPackageToNpmjsRegistry -Pnpm.publish.registry.npmjs.dry -Pnpm.publish.registry.npmjs.authToken = \"obfuscated\" gradle.properties 1 2 npm.publish.registry.npmjs.dry = npm.publish.registry.npmjs.authToken = \"obfuscated\" Environment Variables Environment variables are only available for the configurations and can be passed in by specifying their uppercase keys in the current process's environment. Boolean properties can omit the value when representing true states. /bin/bash 1 2 3 export NPM_PUBLISH_REGISTRY_NPMJS_DRY = export NPM_PUBLISH_REGISTRY_NPMJS_AUTHTOKEN = \"obfuscated\" ./gradlew publishJsPackageToNpmjsRegistry","title":"Properties"},{"location":"user-guide/configuration/properties/#summary","text":"Most of the configuration options are set to be configurable via various CLI inputs and follow a configuration layers order. Such CLI properties can be passed in four different ways - Gradle CLI Options , System Properties , Gradle Extra Properties , Gradle Properties and Environment Variables .","title":"Summary"},{"location":"user-guide/configuration/properties/#gradle-cli-options","text":"Gradle CLI options are only available for the tasks and can be passed in by specifying their keys prefixed with double hyphens ( -- ) right after the task name. Boolean properties can omit the value when representing true states. /bin/bash 1 ./gradlew publishJsPackageToNpmjsRegistry --dry --authToken = \"obfuscated\"","title":"Gradle CLI Options"},{"location":"user-guide/configuration/properties/#system-properties","text":"System properties are only available for the configurations and can be passed in by specifying their keys prefixed with -D anywhere on the command line. Boolean properties can omit the value when representing true states. /bin/bash 1 ./gradlew publishJsPackageToNpmjsRegistry -Dnpm.publish.registry.npmjs.dry -Dnpm.publish.registry.npmjs.authToken = \"obfuscated\"","title":"System Properties"},{"location":"user-guide/configuration/properties/#gradle-extra-properties","text":"Gradle extra properties are only available for the configurations and can be passed in via extra project extension. This can be useful for multi-module builds that needs to configure other modules from submodules. Boolean properties can omit the value when representing true states. build.gradle.kts 1 2 extra . properties [ \"npm.publish.registry.npmjs.dry\" ] = null extra . properties [ \"npm.publish.registry.npmjs.authToken\" ] = \"obfuscated\"","title":"Gradle Extra Properties"},{"location":"user-guide/configuration/properties/#gradle-properties","text":"Gradle properties are only available for the configurations and can be passed in by specifying their keys prefixed with -P anywhere on the command line or via the gradle.properties file. Boolean properties can omit the value when representing true states. CLI gradle.properties /bin/bash 1 ./gradlew publishJsPackageToNpmjsRegistry -Pnpm.publish.registry.npmjs.dry -Pnpm.publish.registry.npmjs.authToken = \"obfuscated\" gradle.properties 1 2 npm.publish.registry.npmjs.dry = npm.publish.registry.npmjs.authToken = \"obfuscated\"","title":"Gradle Properties"},{"location":"user-guide/configuration/properties/#environment-variables","text":"Environment variables are only available for the configurations and can be passed in by specifying their uppercase keys in the current process's environment. Boolean properties can omit the value when representing true states. /bin/bash 1 2 3 export NPM_PUBLISH_REGISTRY_NPMJS_DRY = export NPM_PUBLISH_REGISTRY_NPMJS_AUTHTOKEN = \"obfuscated\" ./gradlew publishJsPackageToNpmjsRegistry","title":"Environment Variables"},{"location":"user-guide/configuration/registry/","text":"Summary The registries configure publication targets and their authentication. For each configured NpmRegistry and NpmPackage combination, a unique publish<PackageName>PackageTo<RegistryName>Registry NpmPublishTask will be generated and added as a dependency to the publish lifecycle task. The registries can be accessed and configured from a build.gradle.kts file via npmPublish::registries invocation. build.gradle.kts 1 2 3 4 5 npmPublish { registries { ... } } Shortcuts Some shortcuts are also available for common npm registries. These shortcuts simply name the registry and sets the appropriate uri for you. The names of the registries match the DSL name. Finally, the shortcuts are repeatable and will detect and configure existing registries on subsequent invocations. build.gradle.kts 1 2 3 4 5 6 7 8 9 10 npmPublish { registries { npmjs { authToken . set ( \"obfuscated\" ) } github { authToken . set ( \"obfuscated\" ) } } } Properties Properties Keys Usage Property Type Default When Kotlin plugin is present access NpmAccess NpmPublishExtension::access dry NpmAccess NpmPublishExtension::dry uri URI otp String authToken String Property CLI System/Gradle Environment access npm.publish.registry.<name>.access NPM_PUBLISH_REGISTRY_<NAME>_ACCESS dry npm.publish.registry.<name>.dry NPM_PUBLISH_REGISTRY_<NAME>_DRY uri npm.publish.registry.<name>.uri NPM_PUBLISH_REGISTRY_<NAME>_URI otp npm.publish.registry.<name>.otp NPM_PUBLISH_REGISTRY_<NAME>_OTP authToken npm.publish.registry.<name>.authToken NPM_PUBLISH_REGISTRY_<NAME>_AUTHTOKEN build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 npmPublish { registries { register ( \"npmjs\" ) { access . set ( RESTRICTED ) dry . set ( true ) uri . set ( uri ( \"https://registry.npmjs.org\" )) // (1) otp . set ( \"obfuscated\" ) authToken . set ( \"obfuscated\" ) } } } uri can also be set from String as uri.set(\"https://registry.npmjs.org\") in which case the plugin will construct an URI instance from the string for you access Registry access. More info dry Overrides NpmPublishExtension::dry value for this registry uri NPM registry uri to publish packages to. Should include schema domain and path if required. Can be set from URI or String otp Optional OTP to use when authenticating with the registry authToken Auth token to use when authenticating with the registry. More info","title":"Registry"},{"location":"user-guide/configuration/registry/#summary","text":"The registries configure publication targets and their authentication. For each configured NpmRegistry and NpmPackage combination, a unique publish<PackageName>PackageTo<RegistryName>Registry NpmPublishTask will be generated and added as a dependency to the publish lifecycle task. The registries can be accessed and configured from a build.gradle.kts file via npmPublish::registries invocation. build.gradle.kts 1 2 3 4 5 npmPublish { registries { ... } }","title":"Summary"},{"location":"user-guide/configuration/registry/#shortcuts","text":"Some shortcuts are also available for common npm registries. These shortcuts simply name the registry and sets the appropriate uri for you. The names of the registries match the DSL name. Finally, the shortcuts are repeatable and will detect and configure existing registries on subsequent invocations. build.gradle.kts 1 2 3 4 5 6 7 8 9 10 npmPublish { registries { npmjs { authToken . set ( \"obfuscated\" ) } github { authToken . set ( \"obfuscated\" ) } } }","title":"Shortcuts"},{"location":"user-guide/configuration/registry/#properties","text":"Properties Keys Usage Property Type Default When Kotlin plugin is present access NpmAccess NpmPublishExtension::access dry NpmAccess NpmPublishExtension::dry uri URI otp String authToken String Property CLI System/Gradle Environment access npm.publish.registry.<name>.access NPM_PUBLISH_REGISTRY_<NAME>_ACCESS dry npm.publish.registry.<name>.dry NPM_PUBLISH_REGISTRY_<NAME>_DRY uri npm.publish.registry.<name>.uri NPM_PUBLISH_REGISTRY_<NAME>_URI otp npm.publish.registry.<name>.otp NPM_PUBLISH_REGISTRY_<NAME>_OTP authToken npm.publish.registry.<name>.authToken NPM_PUBLISH_REGISTRY_<NAME>_AUTHTOKEN build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 npmPublish { registries { register ( \"npmjs\" ) { access . set ( RESTRICTED ) dry . set ( true ) uri . set ( uri ( \"https://registry.npmjs.org\" )) // (1) otp . set ( \"obfuscated\" ) authToken . set ( \"obfuscated\" ) } } } uri can also be set from String as uri.set(\"https://registry.npmjs.org\") in which case the plugin will construct an URI instance from the string for you","title":"Properties"},{"location":"user-guide/configuration/registry/#access","text":"Registry access. More info","title":"access"},{"location":"user-guide/configuration/registry/#dry","text":"Overrides NpmPublishExtension::dry value for this registry","title":"dry"},{"location":"user-guide/configuration/registry/#uri","text":"NPM registry uri to publish packages to. Should include schema domain and path if required. Can be set from URI or String","title":"uri"},{"location":"user-guide/configuration/registry/#otp","text":"Optional OTP to use when authenticating with the registry","title":"otp"},{"location":"user-guide/configuration/registry/#authtoken","text":"Auth token to use when authenticating with the registry. More info","title":"authToken"},{"location":"user-guide/tasks/","text":"","title":"Tasks"},{"location":"user-guide/tasks/NodeExecTask/","text":"Summary Basic task for executing various node commands. Provides access to node executable. The task can be created and configured in a build.gradle.kts file by registering it with correct type. build.gradle.kts 1 2 3 4 5 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NodeExecTask :: class ) { ... } } Properties Properties Keys Usage Property Type Default When Kotlin plugin is present nodeHome DirectoryProperty NODE_HOME env variable kotlinNodeJsSetup task output Property CLI System/Gradle Environment nodeHome --nodeHome NODE_HOME build.gradle.kts 1 2 3 4 5 6 7 8 9 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NodeExecTask :: class ) { nodeHome . set ( layout . projectDirectory . dir ( \"/usr/share/node\" )) doLast { val args = listOf ( \"--help\" ) nodeExec ( args ) } } } nodeHome Base NodeJS directory used to extract other node executables from.","title":"NodeExecTask"},{"location":"user-guide/tasks/NodeExecTask/#summary","text":"Basic task for executing various node commands. Provides access to node executable. The task can be created and configured in a build.gradle.kts file by registering it with correct type. build.gradle.kts 1 2 3 4 5 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NodeExecTask :: class ) { ... } }","title":"Summary"},{"location":"user-guide/tasks/NodeExecTask/#properties","text":"Properties Keys Usage Property Type Default When Kotlin plugin is present nodeHome DirectoryProperty NODE_HOME env variable kotlinNodeJsSetup task output Property CLI System/Gradle Environment nodeHome --nodeHome NODE_HOME build.gradle.kts 1 2 3 4 5 6 7 8 9 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NodeExecTask :: class ) { nodeHome . set ( layout . projectDirectory . dir ( \"/usr/share/node\" )) doLast { val args = listOf ( \"--help\" ) nodeExec ( args ) } } }","title":"Properties"},{"location":"user-guide/tasks/NodeExecTask/#nodehome","text":"Base NodeJS directory used to extract other node executables from.","title":"nodeHome"},{"location":"user-guide/tasks/NpmAssembleTask/","text":"Summary A task to assemble all required files for a given NpmPackage . The task can be created and configured in a build.gradle.kts file by registering it with correct type. build.gradle.kts 1 2 3 4 5 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmAssembleTask :: class ) { ... } } Properties Properties Keys Usage Property Type Default When Kotlin plugin is present package NpmPackage destinationDir Directory $buildDir/packages/<package.name> Property CLI System/Gradle Environment package destinationDir --destinationDir build.gradle.kts 1 2 3 4 5 6 7 8 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmAssembleTask :: class ) { `package` { ... } destinationDir . set ( layout . buildDirectory . dir ( \"js/main\" )) } } package The configuration of the package to assemble. destinationDir Output directory to assemble the package to.","title":"NpmAssembleTask"},{"location":"user-guide/tasks/NpmAssembleTask/#summary","text":"A task to assemble all required files for a given NpmPackage . The task can be created and configured in a build.gradle.kts file by registering it with correct type. build.gradle.kts 1 2 3 4 5 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmAssembleTask :: class ) { ... } }","title":"Summary"},{"location":"user-guide/tasks/NpmAssembleTask/#properties","text":"Properties Keys Usage Property Type Default When Kotlin plugin is present package NpmPackage destinationDir Directory $buildDir/packages/<package.name> Property CLI System/Gradle Environment package destinationDir --destinationDir build.gradle.kts 1 2 3 4 5 6 7 8 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmAssembleTask :: class ) { `package` { ... } destinationDir . set ( layout . buildDirectory . dir ( \"js/main\" )) } }","title":"Properties"},{"location":"user-guide/tasks/NpmAssembleTask/#package","text":"The configuration of the package to assemble.","title":"package"},{"location":"user-guide/tasks/NpmAssembleTask/#destinationdir","text":"Output directory to assemble the package to.","title":"destinationDir"},{"location":"user-guide/tasks/NpmExecTask/","text":"Summary Basic task for executing various npm commands. Extends NodeExecTask and provides access to npm executable. The task can be created and configured in a build.gradle.kts file by registering it with correct type. build.gradle.kts 1 2 3 4 5 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmExecTask :: class ) { ... } } Properties Properties Keys Usage Property Type Default When Kotlin plugin is present Property CLI System/Gradle Environment build.gradle.kts 1 2 3 4 5 6 7 8 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmExecTask :: class ) { doLast { val args = listOf ( \"--help\" ) npmExec ( args ) } } }","title":"NpmExecTask"},{"location":"user-guide/tasks/NpmExecTask/#summary","text":"Basic task for executing various npm commands. Extends NodeExecTask and provides access to npm executable. The task can be created and configured in a build.gradle.kts file by registering it with correct type. build.gradle.kts 1 2 3 4 5 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmExecTask :: class ) { ... } }","title":"Summary"},{"location":"user-guide/tasks/NpmExecTask/#properties","text":"Properties Keys Usage Property Type Default When Kotlin plugin is present Property CLI System/Gradle Environment build.gradle.kts 1 2 3 4 5 6 7 8 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmExecTask :: class ) { doLast { val args = listOf ( \"--help\" ) npmExec ( args ) } } }","title":"Properties"},{"location":"user-guide/tasks/NpmPackTask/","text":"Summary A task to pack a .tgz archive for the given package. Extends NpmExecTask . The task can be created and configured in a build.gradle.kts file by registering it with correct type. build.gradle.kts 1 2 3 4 5 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmPackTask :: class ) { ... } } Properties Properties Keys Usage Property Type Default When Kotlin plugin is present packageDir DirectoryProperty dry Boolean false outputFile RegularFile $buildDir/packages/<scope>-<name>-<version>.tgz Property CLI System/Gradle Environment packageDir dry --dry outputFile --outputFile build.gradle.kts 1 2 3 4 5 6 7 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmPackTask :: class ) { packageDir . set ( layout . projectDirectory . dir ( \"src/main/js\" )) dry . set ( true ) outputFile . set ( layout . buildDirectory . dir ( \"js/main\" )) } } packageDir The directory where the assembled and ready-to-pack package is. dry Controls dry-tun mode for the execution. When enabled, npm pack command will be run with a switch that does everything it normally would except creating the tarball. outputFile Output file to pack the publication to.","title":"NpmPackTask"},{"location":"user-guide/tasks/NpmPackTask/#summary","text":"A task to pack a .tgz archive for the given package. Extends NpmExecTask . The task can be created and configured in a build.gradle.kts file by registering it with correct type. build.gradle.kts 1 2 3 4 5 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmPackTask :: class ) { ... } }","title":"Summary"},{"location":"user-guide/tasks/NpmPackTask/#properties","text":"Properties Keys Usage Property Type Default When Kotlin plugin is present packageDir DirectoryProperty dry Boolean false outputFile RegularFile $buildDir/packages/<scope>-<name>-<version>.tgz Property CLI System/Gradle Environment packageDir dry --dry outputFile --outputFile build.gradle.kts 1 2 3 4 5 6 7 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmPackTask :: class ) { packageDir . set ( layout . projectDirectory . dir ( \"src/main/js\" )) dry . set ( true ) outputFile . set ( layout . buildDirectory . dir ( \"js/main\" )) } }","title":"Properties"},{"location":"user-guide/tasks/NpmPackTask/#packagedir","text":"The directory where the assembled and ready-to-pack package is.","title":"packageDir"},{"location":"user-guide/tasks/NpmPackTask/#dry","text":"Controls dry-tun mode for the execution. When enabled, npm pack command will be run with a switch that does everything it normally would except creating the tarball.","title":"dry"},{"location":"user-guide/tasks/NpmPackTask/#outputfile","text":"Output file to pack the publication to.","title":"outputFile"},{"location":"user-guide/tasks/NpmPublishTask/","text":"Summary A task to publish a given NpmPackage to a given NpmRegistry . The task can be created and configured in a build.gradle.kts file by registering it with correct type. build.gradle.kts 1 2 3 4 5 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmPublishTask :: class ) { ... } } Properties Properties Keys Usage Property Type Default When Kotlin plugin is present registry NpmRegistry packageDir Directory dry Boolean false Property CLI System/Gradle Environment registry packageDir dry --dry build.gradle.kts 1 2 3 4 5 6 7 8 9 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmPublishTask :: class ) { registry { ... } packageDir . set ( layout . projectDirectory . dir ( \"src/main/js\" )) dry . set ( true ) } } registry A registry to publish to packageDir The directory where the assembled and ready-to-publish package is dry Controls dry-tun mode for the execution.","title":"NpmPublishTask"},{"location":"user-guide/tasks/NpmPublishTask/#summary","text":"A task to publish a given NpmPackage to a given NpmRegistry . The task can be created and configured in a build.gradle.kts file by registering it with correct type. build.gradle.kts 1 2 3 4 5 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmPublishTask :: class ) { ... } }","title":"Summary"},{"location":"user-guide/tasks/NpmPublishTask/#properties","text":"Properties Keys Usage Property Type Default When Kotlin plugin is present registry NpmRegistry packageDir Directory dry Boolean false Property CLI System/Gradle Environment registry packageDir dry --dry build.gradle.kts 1 2 3 4 5 6 7 8 9 tasks { register ( \"name\" , dev . petuska . npm . publish . task . NpmPublishTask :: class ) { registry { ... } packageDir . set ( layout . projectDirectory . dir ( \"src/main/js\" )) dry . set ( true ) } }","title":"Properties"},{"location":"user-guide/tasks/NpmPublishTask/#registry","text":"A registry to publish to","title":"registry"},{"location":"user-guide/tasks/NpmPublishTask/#packagedir","text":"The directory where the assembled and ready-to-publish package is","title":"packageDir"},{"location":"user-guide/tasks/NpmPublishTask/#dry","text":"Controls dry-tun mode for the execution.","title":"dry"}]}